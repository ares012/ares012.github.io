<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>java服务线上问题排查思路</title>
      <link href="/2018/10/10/java%E6%9C%8D%E5%8A%A1%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/"/>
      <url>/2018/10/10/java%E6%9C%8D%E5%8A%A1%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h2 id="1-常见问题"><a href="#1-常见问题" class="headerlink" title="1. 常见问题"></a>1. 常见问题</h2><p>Java 服务的线上问题从系统表象来看归结起来总共有四方面：CPU、内存、磁盘、网络，可以分为两大类：</p><ul><li>系统问题：CPU 使用率过高、CPU 上下文切换频率次数较高、磁盘空间不够、磁盘 I/O 频繁、网络流量异常、系统可用内存过低等</li><li>业务问题：PV 量过高、服务调用耗时异常、线程死锁、多线程并发问题、频繁进行 Full GC等<a id="more"></a></li></ul><h2 id="2-问题定位思路"><a href="#2-问题定位思路" class="headerlink" title="2. 问题定位思路"></a>2. 问题定位思路</h2><p>一边从操作系统开始，先排除操作系统和网络问题而导致的线上服务问题，这些问题可以很快从系统的监控工具看到。进而关注 jvm 相关参数，而这一步相对来说比较难排查。下面从系统问题和业务问题角度去分析一下常用的排查命令。</p><h2 id="2-1-系统问题排查"><a href="#2-1-系统问题排查" class="headerlink" title="2.1 系统问题排查"></a>2.1 系统问题排查</h2><p>关注点：cpu、内存、网络、磁盘</p><p>常用命令:</p><ul><li><p>top/htop: 显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p><ul><li>-b: 批处理</li><li>-c: 显示完整的治命令</li><li>-I: 忽略失效过程</li><li>-s: 保密模式</li><li>-S: 累积模式</li><li>-i&lt;时间&gt;: 设置间隔时间</li><li>-u&lt;用户名&gt;: 指定用户名</li><li>-p&lt;进程号&gt;: 指定进程</li><li>-n&lt;次数&gt;: 循环显示的次数</li></ul></li></ul><hr><ul><li>free: 显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区</li></ul><hr><ul><li><p>vmstat: 详细的内存、cpu、进程、I/O等系统整体运行状态<br>Procs:</p><ul><li>r: 运行队列中进程数量，这个值也可以判断是否需要增加CPU。（长期大于1）</li><li>b: 等待IO的进程数量。</li></ul><p>Memory:</p><ul><li>swpd: 使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。</li><li>free: 空闲物理内存大小。</li><li>buff: 用作缓冲的内存大小。</li><li>cache: 用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小。</li></ul><p>Swap:</p><ul><li>si: 每秒从交换区写到内存的大小，由磁盘调入内存。</li><li>so: 每秒写入交换区的内存大小，由内存调入磁盘。</li></ul><p>IO:</p><ul><li>bi: 每秒读取的块数</li><li>bo: 每秒写入的块数</li></ul><p>system:</p><ul><li>in: 每秒中断数，包括时钟中断。</li><li>cs: 每秒上下文切换数。</li></ul><p>CPU：</p><ul><li>us: 用户进程执行时间百分比(user time)。us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</li><li>sy: 内核系统进程执行时间百分比(system time)。sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</li><li>wa: IO等待时间百分比。wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</li><li>id: 空闲时间百分比</li></ul></li></ul><hr><ul><li>iostat: 系统输入输出设备和CPU的使用情况，统计磁盘活动统计情况，同时也会汇报出CPU使用情况</li></ul><hr><ul><li><p>lsof: 查看进程开打的文件，打开文件的进程，进程打开的端口，同时可找回/恢复删除的文件</p><ul><li>-a：列出打开文件存在的进程；</li><li>-c&lt;进程名&gt;：列出指定进程所打开的文件；</li><li>-g：列出GID号进程详情；</li><li>-d&lt;文件号&gt;：列出占用该文件号的进程；</li><li>+d&lt;目录&gt;：列出目录下被打开的文件；</li><li>+D&lt;目录&gt;：递归列出目录下被打开的文件；</li><li>-n&lt;目录&gt;：列出使用NFS的文件；</li><li>-i&lt;条件&gt;：列出符合条件的进程</li><li>-p&lt;进程号&gt;：列出指定进程号所打开的文件；</li><li>-u：列出UID号进程详情；</li><li>-h：显示帮助信息；</li><li>-v：显示版本信息。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8080 #查看8080端口的进程</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>dstat: 系统信息统计工具<ul><li>-c：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息。</li><li>-C：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息。</li><li>-d：显示磁盘读写数据大小。</li><li>-D hda,total：include hda and total。</li><li>-n：显示网络状态。</li><li>-N eth1,total：有多块网卡时，指定要显示的网卡。</li><li>-l：显示系统负载情况。</li><li>-m：显示内存使用情况。</li><li>-g：显示页面使用情况。</li><li>-p：显示进程状态。</li><li>-s：显示交换分区使用情况。</li><li>-S：类似D/N。</li><li>-r：I/O请求情况。</li><li>-y：系统状态。</li><li>–ipc：显示ipc消息队列，信号等信息。</li><li>–socket：用来显示tcp udp端口状态。</li><li>-a：此为默认选项，等同于-cdngy。</li><li>-v：等同于 -pmgdsc -D total。</li><li>–output file：可以把状态信息以csv的格式重定向到指定的文件中。</li></ul></li></ul><hr><ul><li>pstack: 打印输出此进程的堆栈信息。可以输出所有线程的调用关系栈。</li></ul><hr><ul><li>pstree:以树状图的方式展现进程之间的派生关系，显示效果比较直观。<ul><li>-a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示。</li><li>-c：不使用精简标示法。</li><li>-G：使用VT100终端机的列绘图字符。</li><li>-h：列出树状图时，特别标明现在执行的程序。</li><li>-H：此参数的效果和指定”-h”参数类似，但特别标明指定的程序。</li><li>-l：采用长列格式显示树状图。</li><li>-n：用程序识别码排序。预设是以程序名称来排序。</li><li>-p：显示程序识别码。</li><li>-u：显示用户名称。</li><li>-U：使用UTF-8列绘图字符。</li><li>-V：显示版本信息。</li></ul></li></ul><hr><ul><li>strace: 是一个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析<ul><li>-c 统计每一系统调用的所执行的时间,次数和出错的次数等.</li><li>-d 输出strace关于标准错误的调试信息.</li><li>-f 跟踪由fork调用所产生的子进程.</li><li>-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.</li><li>-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪.</li><li>-h 输出简要的帮助信息.</li><li>-i 输出系统调用的入口指针.</li><li>-q 禁止输出关于脱离的消息.</li><li>-r 打印出相对时间关于,,每一个系统调用.</li><li>-t 在输出中的每一行前加上时间信息.</li><li>-tt 在输出中的每一行前加上时间信息,微秒级.</li><li>-ttt 微秒级输出,以秒了表示时间.</li><li>-T 显示每一调用所耗的时间.</li><li>-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.</li><li>-V 输出strace的版本信息.</li><li>-x 以十六进制形式输出非标准字符串</li><li>-xx 所有字符串以十六进制形式输出.</li><li>-a column 设置返回值的输出位置.默认 为40.</li><li>-e expr 指定一个表达式,用来控制如何跟踪.格式：[qualifier=][!]value1[,value2]…<br>qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如:-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open 表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. 注意有些shell使用!来执行历史记录里的命令,所以要使用\.</li><li>-e trace=set 只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all.</li><li>-e trace=file 只跟踪有关文件操作的系统调用.</li><li>-e trace=process 只跟踪有关进程控制的系统调用.</li><li>-e trace=network 跟踪与网络有关的所有系统调用.</li><li>-e strace=signal 跟踪所有与系统信号有关的 系统调用</li><li>-e trace=ipc 跟踪所有与进程通讯有关的系统调用</li><li>-e abbrev=set 设定strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all.</li><li>-e raw=set 将指定的系统调用的参数以十六进制显示.</li><li>-e signal=set 指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号.</li><li>-e read=set 输出从指定文件中读出 的数据.例如: -e read=3,5</li><li>-e write=set 输出写入到指定文件中的数据.</li><li>-o filename 将strace的输出写入文件filename</li><li>-p pid 跟踪指定的进程pid.</li><li>-s strsize 指定输出的字符串的最大长度.默认为32.文件名一直全部输出.</li><li>-u username 以username的UID和GID执行被跟踪的命令</li></ul></li></ul><hr><ul><li>netstat: 用于显示各种网络相关信息<ul><li>-a：列出所有当前的连接</li><li>-at： -t 列出 TCP 协议的连接</li><li>-au： -u 列出 UDP 协议的连接</li><li>-ant：-n 禁用域名解析功能</li><li>-tnl： -l 列出正在监听的套接字</li><li>-nlpt：查看进程信息</li><li>-ltpe：-ep 查看进程名和用户名</li><li>-s：列出所有网络包的统计情况</li><li>-rn：-r 选项打印内核路由信息</li><li>-i： 打印网络接口信息</li><li>-ie：同上，与ifconfig类似</li><li>-ct：-c 选项持续输出信息</li><li>-g：-g 会输出 IPv4 和 IPv6 的多播组信息</li></ul></li></ul><hr><h2 id="2-2-业务异常排查"><a href="#2-2-业务异常排查" class="headerlink" title="2.2 业务异常排查"></a>2.2 业务异常排查</h2><p>思路：线程状态 –&gt; gc log –&gt; 堆 –&gt; 业务log, 其中 full gc 相对比较明显，而线程状态主要查询是否有 locked等。<br>线程状态：</p><ul><li>jstack:(<a href="https://www.xxzp.tech/2018/09/25/java%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">详细参数查看</a>)</li></ul><p>gc 信息：</p><ul><li><p>jstat:(<a href="https://www.xxzp.tech/2018/09/25/java%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">详细参数查看</a>)</p></li><li><p>jmap:(<a href="https://www.xxzp.tech/2018/09/25/java%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">详细参数查看</a>)</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jvm 自带命令工具</title>
      <link href="/2018/09/25/java%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/25/java%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="1-jps"><a href="#1-jps" class="headerlink" title="1. jps"></a>1. jps</h2><p>java程序在启动以后，会在 java.io.tmpdir 指定的目录下，就是临时文件夹里，生成 /tmp/hsperfdata_{userName}/），这个目录下会放着所有对 java 进程的 pid。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps -h</span><br><span class="line">illegal argument: -h</span><br><span class="line">usage: jps [-help]</span><br><span class="line">       jps [-q] [-mlvV] [&lt;hostid&gt;]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">    &lt;hostid&gt;:      &lt;hostname&gt;[:&lt;port&gt;]</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>参数说明：</strong></p><ul><li>jps -q: 仅显示 pid</li><li>jps -v: 输出传递给JVM的参数</li><li>jps -m: 输出传递给main 方法的参数，在嵌入式jvm上可能是null</li><li>jps -l: 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</li></ul><h2 id="2-jstack"><a href="#2-jstack" class="headerlink" title="2. jstack"></a>2. jstack</h2><p>jstack 用于生成 java 虚拟机当前时刻的线程快照。线程快照是当前 java 虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。</p><p><strong>线程状态:</strong> </p><ul><li>NEW: 未启动的，不会出现在Dump中</li><li>RUNNABLE: 在虚拟机内执行的</li><li>BLOCKED: 受阻塞并等待监视器锁</li><li>WAITING: 无限等待另一个线程执行特定操作</li><li>TIMED_WAITING: 有时限等待另一个线程的特定操作</li><li>TERMINATED: 线程执行完成状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">jstack -h</span><br><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)</span><br><span class="line">    -m  to print both java and native frames (mixed mode)</span><br><span class="line">    -l  long listing. Prints additional information about locks</span><br><span class="line">    -h or -help to print this help message</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>jstack pid: 查看堆栈信息</li><li>jstack -F pid: 强制打印栈信息</li><li>jstack -m pid: 打印 java 和 native c/c++ 所有栈信息</li><li>jstack -l pid: 打印关于锁的附加信息</li></ul><h2 id="3-jmap"><a href="#3-jmap" class="headerlink" title="3. jmap"></a>3. jmap</h2><p>jmap 主要打印指定Java进程的共享对象内存映射或堆内存细节，可以使用 jmap 生成 Heap Dump。Heap Dump 是反应 Java 堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">jmap -h</span><br><span class="line">Usage:</span><br><span class="line">    jmap [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jmap [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    &lt;none&gt;               to print same info as Solaris pmap</span><br><span class="line">    -heap                to print java heap summary</span><br><span class="line">    -histo[:live]        to print histogram of java object heap; if the "live"</span><br><span class="line">                         suboption is specified, only count live objects</span><br><span class="line">    -clstats             to print class loader statistics</span><br><span class="line">    -finalizerinfo       to print information on objects awaiting finalization</span><br><span class="line">    -dump:&lt;dump-options&gt; to dump java heap in hprof binary format</span><br><span class="line">                         dump-options:</span><br><span class="line">                           live         dump only live objects; if not specified,</span><br><span class="line">                                        all objects in the heap are dumped.</span><br><span class="line">                           format=b     binary format</span><br><span class="line">                           file=&lt;file&gt;  dump heap to &lt;file&gt;</span><br><span class="line">                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</span><br><span class="line">    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo</span><br><span class="line">                         to force a heap dump or histogram when &lt;pid&gt; does not</span><br><span class="line">                         respond. The "live" suboption is not supported</span><br><span class="line">                         in this mode.</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li>jmap pid: 打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称</li><li>jmap -heap pid: 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和 堆使用信息(各分内存区域信息)</li><li>jmap -histo pid: 打印堆的统计信息，其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名</li><li>jmap -histo:live pid: 同上，只计算活动的对象, 会触发 full gc</li><li>jmap clstats: 打印类加载统计信息</li><li>jmap finalizerinfo pid: 打印等待终结的对象信息</li><li>jmap dump format=b, file=filename pid: 以 hprof 二进制格式转储 Java 堆到指定 filename 的文件中。</li><li>jmap dump:live, format=b,file=ilename pid: 同上，只输出活跃对象信息</li><li>jmap -F pid: 强制模式，如果指定的pid没有响应，请使用jmap -dump 或jmap -histo 选项，不支持live子选项。</li></ul><h2 id="4-jstat"><a href="#4-jstat" class="headerlink" title="4. jstat"></a>4. jstat</h2><p>jstat(JVM Statistics Monitoring Tool)用于监控虚拟机各种运行状态信息的命令行工具，可用于显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jstat -help</span><br><span class="line">Usage: jstat -help|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">  &lt;option&gt;      An option reported by the -options option</span><br><span class="line">  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:</span><br><span class="line">                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]</span><br><span class="line">                Where &lt;lvmid&gt; is the local vm identifier for the target</span><br><span class="line">                Java virtual machine, typically a process id; &lt;hostname&gt; is</span><br><span class="line">                the name of the host running the target Java virtual machine;</span><br><span class="line">                and &lt;port&gt; is the port number for the rmiregistry on the</span><br><span class="line">                target host. See the jvmstat documentation for a more complete</span><br><span class="line">                description of the Virtual Machine Identifier.</span><br><span class="line">  &lt;lines&gt;       Number of samples between header lines.</span><br><span class="line">  &lt;interval&gt;    Sampling interval. The following forms are allowed:</span><br><span class="line">                    &lt;n&gt;["ms"|"s"]</span><br><span class="line">                Where &lt;n&gt; is an integer and the suffix specifies the units as</span><br><span class="line">                milliseconds("ms") or seconds("s"). The default units are "ms".</span><br><span class="line">  &lt;count&gt;       Number of samples to take before terminating.</span><br><span class="line">  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.</span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li>Option: gc操作相关</li><li>vmid: 当前运行的java pid</li><li>interval: 间隔时间，单位为秒或者毫秒</li><li>count* 打印次数，如果缺省则打印无数次</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc 8028 100 10</span><br></pre></td></tr></table></figure><p><strong>gc相关说明:</strong></p><ul><li>S0C：第一个幸存区的大小</li><li>S1C：第二个幸存区的大小</li><li>S0U：第一个幸存区的使用大小</li><li>S1U：第二个幸存区的使用大小</li><li>EC：伊甸园区的大小</li><li>EU：伊甸园区的使用大小</li><li>OC：老年代大小</li><li>OU：老年代使用大小</li><li>MC：方法区大小</li><li>MU：方法区使用大小</li><li>CCSC: 压缩类空间大小</li><li>CCSU: 压缩类空间使用大小</li><li>YGC: 年轻代垃圾回收次数</li><li>YGCT: 年轻代垃圾回收消耗时间</li><li>FGC: 老年代垃圾回收次数</li><li>FGCT: 老年代垃圾回收消耗时间</li><li>GCT: 垃圾回收消耗总时间</li></ul><p><strong>Options参数:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jstat -options -h</span><br><span class="line">-class</span><br><span class="line">-compiler</span><br><span class="line">-gc</span><br><span class="line">-gccapacity</span><br><span class="line">-gccause</span><br><span class="line">-gcmetacapacity</span><br><span class="line">-gcnew</span><br><span class="line">-gcnewcapacity</span><br><span class="line">-gcold</span><br><span class="line">-gcoldcapacity</span><br><span class="line">-gcutil</span><br><span class="line">-printcompilation</span><br></pre></td></tr></table></figure><p><strong>options参数说明:</strong></p><ul><li>jstat -class pid: 显示加载class的数量，及所占空间等信息</li><li>jstat -compiler pid: VM实时编译的数量等信息</li><li>jstat -gc pid: 显示gc的信息，查看gc的次数，及时间</li><li>jstat -gccapacity pid: 堆内存中对象的使用和占用大小</li><li>jstat -gccause pid: </li><li>jstat -gcnew pid: 年轻代对象的信息</li><li>jstat -gcnewcapacity pid: 年轻代对象的信息及其占用量</li><li>jstat -gcold pid: 老年代对象的信息</li><li>jstat -gcoldcapacity pid: 老年代对象的信息及其占用量</li><li>jstat -gcutil pid: gc信息汇总</li><li>jstat -printcompilation pid: 当前VM执行的信息</li><li>jstat -gcmetacapacity pid: 元数据空间统计</li></ul><h2 id="5-jinfo"><a href="#5-jinfo" class="headerlink" title="5. jinfo"></a>5. jinfo</h2><p>用来查看正在运行的 java 应用程序的扩展参数，包括Java System属性和JVM命令行参数；也可以动态的修改正在运行的 JVM 一些参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jinfo -h</span><br><span class="line">Usage:</span><br><span class="line">    jinfo [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jinfo [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    -flag &lt;name&gt;         to print the value of the named VM flag</span><br><span class="line">    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag</span><br><span class="line">    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value</span><br><span class="line">    -flags               to print VM flags</span><br><span class="line">    -sysprops            to print Java system properties</span><br><span class="line">    &lt;no option&gt;          to print both of the above</span><br><span class="line">    -h | -help           to print this help message</span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li>jinfo: 输出全部的参数和系统属性</li><li>jinfo -flag name: 输出对应名称的参数</li><li>jinfo -flag [+|-]name: 开启或者关闭对应名称的参数</li><li>jinfo -flag name=value: 设定对应名称的参数</li><li>jinfo -flags: 输出全部的参数</li><li>jinfo -sysprops: 输出系统属性</li></ul>]]></content>
      
      <categories>
          
          <category> gc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis 分布式锁实现</title>
      <link href="/2018/09/05/redis%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/09/05/redis%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>我们对于 redis 设计的原则是，在设计 key 时必须设置过期时间，因此在用 setnx 和 expire 时是两个操作，不符合锁的原子性操作，所以我们在设计分布式锁的时候必须把两个命令一起提交给 redis 服务端，而不是在客户端操作。基于 redis 是单线程运行，而 lua 脚本执行过程是顺序执行的，所以我们可以考虑结合 lua 脚本提交，保证客户端的操作是原子的，而 redis 服务端可以保证提交的操作是原子性和顺序性。</p><a id="more"></a><h2 id="2-redis-分布式锁实现"><a href="#2-redis-分布式锁实现" class="headerlink" title="2. redis 分布式锁实现"></a>2. redis 分布式锁实现</h2><h3 id="2-1-spring-boot-配置"><a href="#2-1-spring-boot-配置" class="headerlink" title="2.1 spring-boot 配置"></a>2.1 spring-boot 配置</h3><p>此篇是基于 spring-data-redis 实现，在进行分布式实现之前先实现与 spring-boot 集成。</p><p><strong>引入依赖：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-redis'</span>)</span><br><span class="line">compile(<span class="string">'org.apache.commons:commons-pool2'</span>)</span><br><span class="line">compile(<span class="string">'org.apache.commons:commons-lang3'</span>)</span><br></pre></td></tr></table></figure></p><p>上面引入 commons-pools2 为了使用 luttce 连接池，commons-lang3 为了使用一些工具包。</p><p><strong>配置：</strong><br>在 application.yml 文件中配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    redis:</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">        lettuce:</span></span><br><span class="line"><span class="attr">            pool:</span></span><br><span class="line"><span class="attr">                max-idle:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">                max-active:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">                max-wait:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        timeout:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure></p><p><strong>Redis配置类：</strong><br>这里定义一个 Bean 在项目加载时初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(RedisOperations.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(RedisProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"stringRedisTemplate"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这基本上完成了基本配置，上面的配置没有使用自定义序列化与反序列化。</p><h2 id="2-2-基于-redis-分布式锁实现"><a href="#2-2-基于-redis-分布式锁实现" class="headerlink" title="2.2 基于 redis 分布式锁实现"></a>2.2 基于 redis 分布式锁实现</h2><p>实现是基于接口的方式，思路来源于 juc 包中 Lock 的实现方式。</p><p><strong>接口定义如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DistributeLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> TIMEOUT_SECONDS = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> RETRY_TIMES = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> SLEEP_MILLIS = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">tryLockTime</span><span class="params">(String key, String value)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">tryLockTimes</span><span class="params">(String key, String value, <span class="keyword">int</span> retryTimes)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">tryLockTimes</span><span class="params">(String key, String value, <span class="keyword">int</span> expire, <span class="keyword">int</span> retryTimes)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">tryLockTimes</span><span class="params">(String key, String value, <span class="keyword">int</span> expire, <span class="keyword">int</span> retryTimes, <span class="keyword">int</span> sleepMills)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value, <span class="keyword">int</span> expire)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面接口中 try 开头的是可以重试，lock 不带重试，实现都带过期时间,reentrantLock 为可重入锁。</p><p><strong>抽象类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDistributeLock</span> <span class="keyword">implements</span> <span class="title">DistributeLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLockTime</span><span class="params">(String key, String value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLockTimes</span><span class="params">(String key, String value, <span class="keyword">int</span> retryTimes)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryLockTimes(key, value, TIMEOUT_SECONDS, retryTimes, SLEEP_MILLIS);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLockTimes</span><span class="params">(String key, String value, <span class="keyword">int</span> expire, <span class="keyword">int</span> retryTimes)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryLockTimes(key, value, expire, retryTimes, SLEEP_MILLIS);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lock(key, value, TIMEOUT_SECONDS);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现类如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDistributedLock</span> <span class="keyword">extends</span> <span class="title">AbstractDistributeLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RedisScript&lt;Boolean&gt; LOCK_SCRIPT;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">"if (redis.call('setnx', KEYS[1], ARGV[1]) == 1) then\n"</span>);</span><br><span class="line">    sb.append(<span class="string">"\t\tredis.call('expire', KEYS[1], tonumber(ARGV[2]))\n"</span>);</span><br><span class="line">    sb.append(<span class="string">"\t\treturn true\n"</span>);</span><br><span class="line">    sb.append(<span class="string">"end\n"</span>);</span><br><span class="line">    sb.append(<span class="string">"return false"</span>);</span><br><span class="line">    LOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(sb.toString(), Boolean.class);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RedisScript&lt;Boolean&gt; UN_LOCK_SCRIPT;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">"if (redis.call('get', KEYS[1]) == ARGV[1]) then\n"</span>);</span><br><span class="line">    sb.append(<span class="string">"\t\tredis.call('del', KEYS[1])\n"</span>);</span><br><span class="line">    sb.append(<span class="string">"\t\treturn true\n"</span>);</span><br><span class="line">    sb.append(<span class="string">"end\n"</span>);</span><br><span class="line">    sb.append(<span class="string">"\t\treturn false\n"</span>);</span><br><span class="line">    UN_LOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(sb.toString(), Boolean.class);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> StringUtils.isNotBlank(key) &amp;&amp; StringUtils.isNotBlank(value) &amp;&amp; doLock(key, value,</span><br><span class="line">        expire);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//return StringUtils.isNotBlank(key) &amp;&amp; StringUtils.isNotBlank(value) &amp;&amp; doLock1(key, value,</span></span><br><span class="line">    <span class="comment">//expire);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLockTimes</span><span class="params">(String key, String value, <span class="keyword">int</span> expire, <span class="keyword">int</span> retryTimes,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">int</span> sleepMills)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> lock = doLock(key, value, expire);</span><br><span class="line">    <span class="keyword">while</span> (retryTimes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(sleepMills);</span><br><span class="line">      lock = doLock(key, value, expire);</span><br><span class="line">      retryTimes--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lock;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doLock</span><span class="params">(String key, String value, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">    Object object = stringRedisTemplate</span><br><span class="line">        .execute(LOCK_SCRIPT, Collections.singletonList(key), value, String.valueOf(expire));</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(object)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Boolean) object;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Boolean <span class="title">doLock1</span><span class="params">(String key, String value, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stringRedisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">      RedisStringCommands commands = connection.stringCommands();</span><br><span class="line">      Boolean lock = commands.set(key.getBytes(), value.getBytes(), Expiration.seconds(expire),</span><br><span class="line">          SetOption.SET_IF_ABSENT);</span><br><span class="line">      <span class="keyword">return</span> !Objects.isNull(lock);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">    Object object = stringRedisTemplate</span><br><span class="line">        .execute(UN_LOCK_SCRIPT, Collections.singletonList(key), value);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(object)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Boolean) object;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面实现了 doLock() 与 doLock1()，doLock() 通过 lua 脚本提交命令，具体操作交由 redis 服务端。doLock1() 是基于 StringRedisTemplate 实现，最终是通过 lettuce 实现。</p><p><strong>测试如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DistributeLock lock;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redis/lock"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">getLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String uuid = UUID.randomUUID().toString();</span><br><span class="line">  <span class="keyword">return</span> lock.lock(<span class="string">"test_lock"</span>, uuid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redis/releaseLock"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">releaseLock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> lock.releaseLock(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可重入锁：</strong> 通过 ThreadLocal 实现计数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">reentrantLock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">    ConcurrentHashMap&lt;String, Integer&gt; map = currentLock();</span><br><span class="line">    Integer cnt = map.get(key);</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(cnt)) &#123;</span><br><span class="line">        cnt = cnt + <span class="number">1</span>;</span><br><span class="line">        map.put(key, cnt);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> lock = doLock(key, value, TIMEOUT_SECONDS);</span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">        map.put(key, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConcurrentHashMap&lt;String, Integer&gt; <span class="title">currentLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConcurrentHashMap&lt;String, Integer&gt; refs = lockers.get();</span><br><span class="line">    <span class="keyword">if</span> (refs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> refs;</span><br><span class="line">    &#125;</span><br><span class="line">    lockers.set(<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">    <span class="keyword">return</span> lockers.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unReentrantLock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">    ConcurrentHashMap&lt;String, Integer&gt; map = currentLock();</span><br><span class="line">    Integer refCnt = map.get(key);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(refCnt)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    refCnt = refCnt - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (refCnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        map.put(key, refCnt);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        map.remove(key);</span><br><span class="line">        releaseLock(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
          <category> redis </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分代 GC 分析</title>
      <link href="/2018/09/02/%E5%88%86%E4%BB%A3GC%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2018/09/02/%E5%88%86%E4%BB%A3GC%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>分代回收的基本思路，大部分对象都会在短时间内成为垃圾，而经过一定时间依然存活的对象往往存活时间较长。Java程序运行的过程中，会产生大量的对象，其中一些全局对象和连接池相关的对象生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的局部变量而且占大部分，这些对象生命周期会比较短。针对这样的特性，对于生命周期比较短的对象存放在特定的内存区域，重点扫描回收这样可以更有效的回收非活对象。<br><a id="more"></a><br>分代回收策略中，对象按照生成时间进行分代，刚刚生成不久的年轻对象划为新生代（Young gen-eration），而存活了较长时间的对象划为老生代（Old generation）。采用分代回收策略，可以对新生代和老年代采用不同的回收算法，在新生代，对象“朝生夕死”。gc一般采取复制算法，因为此算法的突出特点就是只关心哪些需要被复制，可达性分析只用标记和复制很少的存活对象，而根据老年代对象的特点，一般采用标记-清理策略的算法。采用分代策略，gc时进行可达性分析的范围能大大降低，在分代回收中，新生代的规模比老年代小，回收频率也要高，显然新生代gc的时候不能去遍历老年代。</p><h2 id="2-jvm-分代策略"><a href="#2-jvm-分代策略" class="headerlink" title="2. jvm 分代策略"></a>2. jvm 分代策略</h2><p>jvm 中分代策略如下图；</p><p><img src="/img/edenTenured.png" alt=""></p><h3 id="2-1-新生代"><a href="#2-1-新生代" class="headerlink" title="2.1 新生代"></a>2.1 新生代</h3><p>新生代有划分为Eden、From Survivor和To Survivor三个部分，他们对应的内存空间的大小比例为 8:1:1，为对象分配内存的时候，首先使用Eden空间，经过GC后，没有被回收的会首先进入 From 区域，任何时候，都会保持一个 Survivorq 区域（From 或 To）完全空闲，也就是说新生代的内存利用率最大为90%。</p><p>From 和To 两个区域会根据GC的实际情况，进行互换，将 From 区域中的对象全部复制到 To区域中，或者反过来，将 To 区域中的对象全部复制到 From 区域中。一般 new 一个对象时，它会在 Eden 区中划出一块作为存储对象的内存，由于堆空间是线程共享的，因此直接在这里边划空间是需要进行同步的。</p><h3 id="2-2-老年代"><a href="#2-2-老年代" class="headerlink" title="2.2 老年代"></a>2.2 老年代</h3><p>对象经过多次GC以后，经过Eden Space，多次经过 From 和 To 之后进入年老代，而且对象在年老代的存活时间比较长，如果进行使用复制算法来进行GC，需要移动大量的对象，导致效率很低。所以，年老代适合使用标记-清除算法，需要被GC的对象很少，那么标记的对象就很少，在对标记的对象进行回收，效率就会很高。</p><h2 id="3-内存分配过程"><a href="#3-内存分配过程" class="headerlink" title="3. 内存分配过程"></a>3. 内存分配过程</h2><ul><li><p>对象优先在Eden分配</p></li><li><p>大对象直接进入老年代</p></li><li><p>长期存活的对象将进入老年代：对象在Eden出生并经过第一次的Minor GC后仍然存活，并且能被Surivivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Surivivor区中每熬过一次MinorGC，年龄就增加一岁，当它的年龄增加到一定程度（默认15岁），就会被晋升到老年代中。</p></li><li><p>动态对象年龄判定：如果Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于改年龄的对象就可以直接进入老年代，无需等到最大年龄阀值。</p></li><li><p>空间分配担保：在发生Minor GC之前，虚拟机会先检查老年大最大可用连续空间是否大于新生代所有对象总空间，如果条件成立，那么Minor GC是安全的。如果不成立，则虚拟机会检查HandlePrimotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，则尝试一次Minor GC，尽管这次Minor GC是有风险的。如果小于，或者HandlePrimotionFailure设置不允许冒险，那么这时也要改为进行一次Full GC。</p></li></ul><h2 id="4-gc-收集器与策略"><a href="#4-gc-收集器与策略" class="headerlink" title="4. gc 收集器与策略"></a>4. gc 收集器与策略</h2><h3 id="4-1-垃圾收集器"><a href="#4-1-垃圾收集器" class="headerlink" title="4.1 垃圾收集器"></a>4.1 垃圾收集器</h3><p><strong>Serial收集器：</strong>单线程收集器，新生代采用复制算法，老年代采用标记-整理，会暂停所有用户线程</p><p><strong>ParNew收集器：</strong>多线程收集器，新生代采用复制算法，老年代采用标记-整理，会暂停所有用户线程。可以与CMS收集器配合工作</p><p><strong>Serial Old 收集器：</strong>Serial收集器的老年代版本，单线程收集器，采用的是“标记–整理”算法</p><p><strong>Parallel Old 收集器：</strong>Parallel收集器的老年代版本，多线程收集器，采用的是“标记–整理”算法。在注重吞吐量以及CPU资源敏感的场合，可以考虑Parallel Scavenge和 Parallel Old 组合。</p><p><strong>CMS 收集器：</strong>并发收集器，低停顿。经过4个步骤：①初始标记②并发标记③重新标记④并发清除。采用“标记–清除算法”。不足：会产生大量空间碎片。①、③仍然需要stop the World</p><p><strong>G1收集器：</strong>G1将堆拆成一系列的分区，这样在一个时间段内，大部分的垃圾收集操作就只是在一个分区内执行，而不是整个堆或整个（老年）代。</p><h3 id="4-2-gc-策略"><a href="#4-2-gc-策略" class="headerlink" title="4.2 gc 策略"></a>4.2 gc 策略</h3><p><strong>默认策略：</strong>JVM针对上述不同的分代区域，默认使用的 GC 策略如下：</p><table><thead><tr><th>运行模式</th><th>新生代垃GC策略</th><th>年老代GC策略</th></tr></thead><tbody><tr><td>Client</td><td>Serial GC</td><td>Serial Old GC</td></tr><tr><td>Server</td><td>Parallel Scavenge  GC</td><td>Serial Old GC</td></tr></tbody></table><p>平时我们运行Java程序，没有指定任何选项的时候，默认根据上面的GC策略搭配进行GC。</p><p><strong>gc 策略组合：</strong>JVM调优的过程中，并非任何一种新生代GC策略都可以和另一种年老代GC策略进行配合工作，如下是常用使用组合：</p><table><thead><tr><th style="text-align:center">策略</th><th>新生代</th><th>年老代</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>Serial</td><td>Serial Old</td><td>Serial和Serial Old都是单线程进行GC，特点就是GC时暂停所有应用线程</td></tr><tr><td style="text-align:center">2</td><td>Serial</td><td>CMS+Serial Old</td><td>CMS是并发GC，实现GC线程和应用线程并发工作，不需要暂停所有应用线程, 当CMS进行GC失败时，会自动使用Serial Old策略进行GC</td></tr><tr><td style="text-align:center">3</td><td>ParNew</td><td>CMS</td><td>使用-XX:+UseParNewGC选项来开启，ParNew是Serial的并行版本，可以指定GC线程数，默认GC线程数为CPU的数量，可以使用-XX:ParallelGCThreads选项指定GC的线程数，如果指定了选项-XX:+UseConcMarkSweepGC选项，则新生代默认使用ParNew GC策略</td></tr><tr><td style="text-align:center">4</td><td>ParNew</td><td>Serial Old</td><td>使用-XX:+UseParNewGC选项来开启。新生代使用ParNew GC策略，年老代默认使用Serial Old GC策略</td></tr><tr><td style="text-align:center">5</td><td>Parallel Scavenge</td><td>Serial Old</td><td>Parallel Scavenge策略主要是关注一个可控的吞吐量：应用程序运行时间 / (应用程序运行时间 + GC时间)，适用于后台持久运行的应用程序，而不适用于交互较多的应用程序</td></tr><tr><td style="text-align:center">6</td><td>Parallel Scavenge</td><td>Parallel Old</td><td>Parallel Old是Serial Old的并行版本</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> gc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CMS 深入分析</title>
      <link href="/2018/09/02/CMS%20%E6%B7%B1%E5%85%A5/"/>
      <url>/2018/09/02/CMS%20%E6%B7%B1%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>CMS(Concurrent Mark Sweep): 并发收集器，，作用于老年代，通常与ParNew配合使用。CMS收集器工作的整个流程分为以下4个步骤：</p><ul><li>初始标记（CMS initial mark）：仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要 Stop The World</li><li>并发标记（CMS concurrent mark）：进行GC Roots Tracing的过程，在整个过程中耗时最长</li><li>重新标记（CMS remark）：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。此阶段也需要 Stop The World</li><li>并发清除（CMS concurrent sweep）<a id="more"></a>从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的，下图为 CMS 与应用线程关系如下图：</li></ul><p><img src="/img/cms.png" alt=""></p><p><strong>优点：</strong> 并发收集、低停顿</p><p><strong>缺点：</strong></p><ul><li>对CPU资源非常敏感：CMS默认启动的回收线程数是（CPU数量+3）/4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个时（比如2个），CMS对用户程序的影响就可能变得很大，如果本来CPU负载就比较大，还要分出一半的运算能力去执行收集器线程。</li><li>无法处理浮动垃圾：由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生。这一部分垃圾出现在标记过程之后，CMS无法再当次收集中处理掉它们，只好留待下一次GC时再清理掉。</li><li>标记-清除算法导致的空间碎片：CMS是一款基于“标记-清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。空间碎片过多时，将会给大对象分配带来很大麻烦，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象。</li></ul><h2 id="2-cms-实践"><a href="#2-cms-实践" class="headerlink" title="2. cms 实践"></a>2. cms 实践</h2><p>下图为 cms gc log:</p><p><img src="/img/cms-gc-log.png" alt=""></p><p>从上图可看到，日志包含 gc 相关参数与 gc 动作与内存信息，下面将进行详细分析。</p><h3 id="2-1-cms-日志解析"><a href="#2-1-cms-日志解析" class="headerlink" title="2.1 cms 日志解析"></a>2.1 cms 日志解析</h3><p>先看这一段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0.627: [Full GC (Allocation Failure) 0.627: [CMS: 215379K-&gt;215367K(327680K), 0.0206276 secs] 215379K-&gt;215367K(504640K), [Metaspace: 2694K-&gt;2694K(1056768K)], 0.0207120 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]</span><br><span class="line">0.649: [GC (CMS Initial Mark) [1 CMS-initial-mark: 215367K(327680K)] 215367K(504640K), 0.0001627 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span><br><span class="line">0.649: [CMS-concurrent-mark-start]</span><br><span class="line">0.889: [CMS-concurrent-mark: 0.002/0.240 secs] [Times: user=0.01 sys=0.11, real=0.24 secs]</span><br><span class="line">0.889: [CMS-concurrent-preclean-start]</span><br><span class="line">0.890: [CMS-concurrent-preclean: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span><br><span class="line">0.890: [CMS-concurrent-abortable-preclean-start]</span><br></pre></td></tr></table></figure><p>上面的日志对应 cms 的四个过程（概述中说明）。包含具体的空间信息和执行时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.227: [GC (Allocation Failure) 0.228: [ParNew: 111838K-&gt;10608K(176960K), 0.0749171 secs] 111838K-&gt;102770K(504640K), 0.0750134 secs] [Times: user=0.24 sys=0.04, real=0.07 secs]</span><br></pre></td></tr></table></figure><ul><li>GC：用来区分(distinguish)是 Minor GC 还是 Full GC 的标志(Flag). 这里的 GC 表明本次发生的是 Minor GC</li><li>Allocation Failure：引起垃圾回收的原因，本次GC是因为年轻代中没有任何合适的区域能够存放需要分配的数据结构而触发的</li><li>ParNew：使用的垃圾收集器的名字，多线程收集器，新生代采用复制算法，老年代采用标记-整理，会产生 stop-the-world</li><li>111838K-&gt;10608K(176960K), 0.0749171 secs] 111838K-&gt;102770K(504640K)：堆内存变化情况</li><li>0.0750134 secs：gc时间</li><li>[Times: user=0.24 sys=0.04, real=0.07 secs]：<br>  user – 此次垃圾回收, 垃圾收集线程消耗的所有CPU时间(Total CPU time)<br>  sys – 操作系统调用(OS call) 以及等待系统事件的时间(waiting for system event)<br>  real – 应用程序暂停的时间(Clock time)</li></ul><h3 id="2-2-cms-常用参数"><a href="#2-2-cms-常用参数" class="headerlink" title="2.2 cms 常用参数"></a>2.2 cms 常用参数</h3><p>首先看下上面示例中的参数配置，这些参数包含 gc 日志相关和堆相关：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:CMSInitiatingOccupancyFraction=85 -XX:CMSMaxAbortablePrecleanTime=5000 -XX:+DisableExplicitGC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/gc/HeapDumpOnOutOfMemoryError.log -XX:InitialHeapSize=536870912 -XX:MaxHeapSize=536870912 -XX:MaxNewSize=201326592 -XX:MaxTenuringThreshold=6 -XX:NewSize=201326592 -XX:OldPLABSize=16 -XX:ParallelGCThreads=4 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:ThreadStackSize=256 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC</span><br></pre></td></tr></table></figure><p>老年代 gc 采用的是 CMS，新生代 gc 为 ParNew。下面为 CMS 一些相关参数说明：<br><strong>CMS initiating options：</strong></p><ul><li>-XX:+UseCMSInitiatingOccupancyOnly：仅使用预定义的占用率作为启动CMS集合的唯一标准，禁止 JVM 自适应行为</li><li>-XX:CMSInitiatingOccupancyFraction=70：设置CMS收集开始的百分比。默认值是-1，负值表示使用 -XX:CMSTriggerRatio 选项来定义这个百分比数</li><li>-XX:CMSBootstrapOccupancy=50</li><li>-XX:CMSTriggerRatio=70：设置由-XX:MinHeapFreeRatio指定值的百分比的值</li><li>-XX:CMSTriggerInterval=60000：gc 触发周期，默认为 -1 表示不执行</li></ul><p><strong>CMS Stop-the-World pauses tuning：</strong></p><ul><li>-XX:CMSWaitDuration=30000：CMSThread默认2秒钟扫描一次，判断是否需要CMS，这个参数可以更改这个扫描时间间隔</li><li>-XX:+CMSScavengeBeforeRemark：CMS GC会以新生代作为GC Root的一部分, 强制新生代在 remark 之前做一次YGC, 能够一定程度上减少GC Root扫描的开销, 从而减少CMS remark时间</li><li>-XX:+CMSScheduleRemarkEdenSizeThreshold：预清理阶段发生的前提是，新生代Eden区的内存使用量大于参数CMSScheduleRemarkEdenSizeThreshold 默认是2M，如果新生代的对象太少，就没有必要执行预清理阶段，直接执行重新标记阶段</li><li>-XX:CMSScheduleRemarkEdenPenetration=20：如果Eden区的内存使用率达到了阈值CMSScheduleRemarkEdenPenetration指定的百分比，默认50%，会退出预清理循环</li><li>-XX:CMSScheduleRemarkSamplingRatio=4 新生代达到预计的比例时开始标记</li></ul><p><strong>CMS Concurrency options：</strong></p><ul><li>-XX:+CMSParallelInitialMarkEnabled：JDK8默认为true，其含义是CMS GC初始化标记阶段并行执行</li><li>-XX:+CMSParallelRemarkEnabled：GC重新标记阶段并行执行，JDK7&amp;JDK8中默认值都是true</li><li>-XX:+CMSParallelSurvivorRemarkEnabled：新生代并发标记，默认值为true</li><li>-XX:+CMSConcurrentMTEnabled：使用多线程标记</li></ul>]]></content>
      
      <categories>
          
          <category> gc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GC 初步</title>
      <link href="/2018/09/01/GC%20%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
      <url>/2018/09/01/GC%20%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><p>GC（Garbage Collection ）：垃圾回收。现代语言都把内存回收交给底层去处理，使得程序员在开发过程中不必过多的去关注 gc，然而在遇到各种内存溢出、内存泄漏问题时，当垃圾收集称为系统达到更高并发量的瓶颈时，只有深入理解 gc 和内存分配，才能对这些“自动化”的技术实施必要的监控和调节。 在深入之前我们先看几个基础概念：<br><a id="more"></a><br><strong>对象：</strong> 在前面深入分析了 <a href="https://www.xxzp.tech/2018/08/26/java%20%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/">java对象</a> ，其中对象包含了 gc 信息</p><p><strong>指针：</strong> 大部分语言默认指针是指向对象的首地址，这样不仅指针在语言的应用变得简单，而且使 gc 过程也变得简单</p><p><strong>堆：</strong> 对象存放内存空间，对于很多语言垃圾回收主要针对堆内存进行回收，这主要是因为 gc 过程是针对对象来处理的</p><p><strong>根Root：</strong> 对象被引用的起始点</p><h3 id="1-2-gc-指标"><a href="#1-2-gc-指标" class="headerlink" title="1.2 gc 指标"></a>1.2 gc 指标</h3><p><strong>吞吐量：</strong>  吞吐量(throughput)指在单位时间内的处理能力，不同的垃圾回收算法在实现上有所不同，如算得算法在活对象较少时吞吐量较好，国为复制算法仅检查活的对象。而标记清除算法会检查所有活对象和非活对象，在对象增多时有可能出现标记清除算法吞吐量比复制算法好</p><p><strong>停顿时间：</strong> 垃圾回收器运行时，应用程序的暂停时间，垃圾回收时会出现 stop-world，这对系统影响较大，如果停顿时间较长对一些系统是不允许的</p><p><strong>垃圾回收频率：</strong>垃圾回收器多长时间运行一次。一般而言，频率越低越好，通常增大堆空间可以有效降低垃圾回收发生的频率，但是会增加回收时产生的停顿时间</p><p><strong>垃圾回收器负载：</strong>垃圾回收器负载=GC耗时/系统总运行时间</p><h2 id="2-对象存活判定"><a href="#2-对象存活判定" class="headerlink" title="2. 对象存活判定"></a>2. 对象存活判定</h2><h3 id="2-1-引用计数"><a href="#2-1-引用计数" class="headerlink" title="2.1 引用计数"></a>2.1 引用计数</h3><p>  <strong>引用计数：</strong>给对象添加一个引用计数器，每被引用一次计数器值 1，当引用释放则减 1，当值为 0 时就说明已经没有地方引用变为无用对象，可以进行回收。引用计数的增减，一般发生在变量赋值、对象内容更新、函数结束等时间点。当一个对象的引用计数变为0时，则说明它将来不会再被引用，因此可以释放相应的内存空间。引用计数中的对象如图:</p><p><img src="/img/Reference-Count.png" alt=""></p><p><strong>循环引用问题：</strong>（a-&gt;b-&gt;c-&gt;a）在abc三个对象没有其他引用时，他们三者相互引用，此时已经是无用对象，但是并不能被回收。</p><p>jvm源码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">short</span> _refcount,  <span class="comment">// needs atomic operation</span></span><br></pre></td></tr></table></figure><p>计数实现(通过cas去实现)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Symbol::increment_refcount() &#123;</span><br><span class="line">  <span class="keyword">if</span> (_refcount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    Atomic::inc(&amp;_refcount);</span><br><span class="line">    NOT_PRODUCT(Atomic::inc(&amp;_total_count);)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Symbol::decrement_refcount() &#123;</span><br><span class="line">  <span class="keyword">if</span> (_refcount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    Atomic::dec(&amp;_refcount);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ASSERT</span></span><br><span class="line">    <span class="keyword">if</span> (_refcount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      print();</span><br><span class="line">      assert(<span class="literal">false</span>, <span class="string">"reference count underflow for symbol"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-可达性分析"><a href="#2-2-可达性分析" class="headerlink" title="2.2 可达性分析"></a>2.2 可达性分析</h3><p><strong>可达性分析：</strong> 通过一系列的称为“GC Roots”的对象作为起点，从这些节点向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是GC Roots 到这个对象不可达）时，则证明此对象时不可用的。</p><p>GC Roots其通常是一组特别管理的指向引用类型对象的指针，这些指针是tracing GC的trace的起点。它们不是对象图里的对象，对象也不可能引用到这些“外部”的指针，这也是tracing GC算法不会出现循环引用问题的基本保证。因此也容易得出，只有引用类型的变量才被认为是Roots，值类型的变量永远不被认为是Roots。只有深刻理解引用类型和值类型的内存分配和管理的不同，才能知道为什么root只能是引用类型。</p><p><strong>java GC Roots 对象：</strong></p><ul><li>虚拟机栈（栈帧中的局部变量表，Local Variable Table）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象</li></ul><h2 id="3-基本回收算法"><a href="#3-基本回收算法" class="headerlink" title="3. 基本回收算法"></a>3. 基本回收算法</h2><p><strong>标记-清除：</strong>分成“标记”、“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p><p>空间问题：标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不触发另一次垃圾收集动作。<br>效率问题：因为内存碎片的存在，操作会变得更加费时，因为查找下一个可用空闲块已不再是一个简单操作。</p><p><strong>标记－整理：</strong><br>此算法的标记过程与标记－清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。</p><p><strong>复制算法：</strong>它将可用内存按容量分成大小相等的两块，每次只使用其中的一块。当这一块内存用完，就将还存活着的对象复制到另一块上面，然后再把已使用过的内存空间一次清理掉。</p><p>复制收集方式中，只存在相当于标记清除方式中的标记阶段。由于清除阶段中需要对现存的所有对象进行扫描，在存在大量对象，且其中大部分都即将死亡的情况下，全部扫描一遍的开销实在是不小。而在复制收集方式中，就不存在这样的开销。</p>]]></content>
      
      <categories>
          
          <category> gc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AQS 深入分析</title>
      <link href="/2018/08/30/AQS%20%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/"/>
      <url>/2018/08/30/AQS%20%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>AQS：AbstractQueuedSynchronizer，即队列同步器，是构建锁或者其他同步组件的基础框架，JUC并发包的实现基础。下图都是基于 aqs 实现的，Semaphore，ReentrantLock，ReentrantReadWriteLock，Worker 等。</p><p><img src="/img/aqs.png" alt=""></p><p>AQS主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。在内部使用（volatile int） state来表示同步状态，当state&gt;0时表示已经获取了锁，当state = 0时表示释放了锁。同时提供了getState()、setState(int newState)、compareAndSetState(int expect,int update）来对同步状态state进行操作。通过 FIFO 同步队列来完成线程的排队，如果当前线程获取同步状态失败（锁）时，AQS则会将当前线程以及等待状态等信息构造成一个节点（Node）并将其加入同步队列，同时会阻塞当前线程，当同步状态释放时，则会把节点中的线程唤醒，使其再次尝试获取同步状态。<br><a id="more"></a></p><h2 id="2-AQS-数据模型"><a href="#2-AQS-数据模型" class="headerlink" title="2. AQS 数据模型"></a>2. AQS 数据模型</h2><p>我们先看下 AQS 的成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br></pre></td></tr></table></figure><p>包含了一个队列(Node)的信息和 state (同步状态)，下面是 Node 即 FIFO 队列的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">//共享模式</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="comment">//独占模式</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//值为1，表示当前的线程被取消</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//值为-1，表示当前节点的后继节点包含的线程需要运行</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//值为-2，表示当前节点在等待condition，也就是在condition队列中</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//值为-3，表示当前场景下后续的acquireShared能够得以执行,值为0，表示当前节点在sync队列中，等待着获取锁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前驱结点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后继结点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前线程</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储condition队列中的后继节点</span></span><br><span class="line">    Node nextWaiter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为共享模式</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取前驱结点</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        Node p = prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, Node mode) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123;</span><br><span class="line">        <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面看到 Node 中有两个常量:</p><ul><li>SHARE: 共享模式指的是允许多个线程获取同一个锁而且可能获取成功</li><li>EXCLUSIVE: 独占模式指的是一个锁如果被一个线程持有，其他线程必须等待</li></ul><h2 id="3-AQS-操作"><a href="#3-AQS-操作" class="headerlink" title="3. AQS 操作"></a>3. AQS 操作</h2><p>AQS 操作是通过继续来使用的，AbstractQueuedSynchronizer 类提供了队列的基本操作方法，下面将详细分析：</p><p><strong>state 操作:</strong> 通过 <a href="http://localhost:4000/2018/08/29/CAS%20%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/" target="_blank" rel="noopener"> CAS </a> 的方式去设置 state 值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>获取独占锁：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我看下两个核心方法：</p><p><strong>addWaiter()：</strong> 通过 CAS 的方式加入队列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是初始化队列，也是通过 CAS 的方式去初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>acquireQueued()：</strong>从队列中获取节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>AQS核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。CLH 队列是一个虚拟的双向队列，AQS是将每条请求共享资源的线程封装成一个CLH锁队列的一个结点（Node）来实现锁的分配。</p><p>自定义同步应用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AresAqs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.tryAcquire(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.tryRelease(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.tryAcquireShared(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.tryReleaseShared(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面示例中，通过内部类继承 AbstractQueuedSynchronizer 来实现同步，其实 ReentrantLock, CountDownLatch, Semphore 这些同步类的实现方式与上面示例实现思路基本一致。</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CAS 深入分析</title>
      <link href="/2018/08/29/CAS%20%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/"/>
      <url>/2018/08/29/CAS%20%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><strong> CAS：</strong> 指CompareAndSwap或CompareAndSet，即比较并交换。比较的是当前内存中存储的值与预期原值，交换的是新值与内存中的值。这个操作是硬件层面的指令，因此能够保证原子性。Java通过JNI（本地方法调用）来使用这个原子操作。先看一段计数的代码：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> testUnsafe = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> POOL_SIZE = Runtime.getRuntime().availableProcessors();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory THREAD_FACTORY = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">      .setNameFormat(<span class="string">"atomic-test-pool"</span>).build();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService POOL_EXECUTOR = <span class="keyword">new</span> ThreadPoolExecutor(POOL_SIZE, POOL_SIZE,</span><br><span class="line">      <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">65535</span>), THREAD_FACTORY);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    AtomicTest atomicTest = <span class="keyword">new</span> AtomicTest();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      POOL_EXECUTOR.execute(() -&gt; atomicTest.safeCount());</span><br><span class="line">      System.out.println(<span class="string">"atomic:"</span> + atomicTest.atomicInteger);</span><br><span class="line">      POOL_EXECUTOR.execute(() -&gt; atomicTest.unSafeCount());</span><br><span class="line">      System.out.println(<span class="string">"unsafe:"</span> + atomicTest.testUnsafe);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">safeCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">      <span class="keyword">int</span> i = atomicInteger.get();</span><br><span class="line">      <span class="keyword">boolean</span> suc = atomicInteger.compareAndSet(i, ++i);</span><br><span class="line">      <span class="keyword">if</span> (suc) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unSafeCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    testUnsafe++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面两个方法，safeCount通过cas处理线程安全，unSafeCount()处理时出现相同的数值。下面深入分析cas的实现原理。</p><h2 id="2-CAS-实现"><a href="#2-CAS-实现" class="headerlink" title="2. CAS 实现"></a>2. CAS 实现</h2><p>Atomic 主要为了实现原子操作，所谓原子操作就是在执行过程中不能被中断，而 CAS 实现的基本思路就是循环进行CAS操作直到成功为止，下面以 AtomicInteger 为例进行分析。AtomicInteger 部分核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">(<span class="keyword">int</span> initialValue)</span> </span>&#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面源码可看到，当初始化一个 AtomicInteger 变量时会转换为被 volatile 修饰的 value。而真正的操作是通过 Unsafe 操作 native 方法实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure><p>对于加操作在 unsafe 包中源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码其核心还是 compareAndSwapInt() 方法。</p><h2 id="3-compareAndSwapInt-在-jvm-中实现"><a href="#3-compareAndSwapInt-在-jvm-中实现" class="headerlink" title="3. compareAndSwapInt 在 jvm 中实现"></a>3. compareAndSwapInt 在 jvm 中实现</h2><p>在 unsafe.cpp 中 compareAndSwapInt 的实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class="line">  UnsafeWrapper(<span class="string">"Unsafe_CompareAndSwapInt"</span>);</span><br><span class="line">  oop p = JNIHandles::resolve(obj);</span><br><span class="line">  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);</span><br><span class="line">  <span class="keyword">return</span> (jint)(Atomic::cmpxchg(x, addr, e)) == e;</span><br><span class="line">UNSAFE_END</span><br></pre></td></tr></table></figure><p>最后通过 Atomic::cmpxchg() 实现操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">jbyte Atomic::cmpxchg(jbyte exchange_value, <span class="keyword">volatile</span> jbyte* dest, jbyte compare_value) &#123;</span><br><span class="line">  assert(<span class="keyword">sizeof</span>(jbyte) == <span class="number">1</span>, <span class="string">"assumption."</span>);</span><br><span class="line">  <span class="keyword">uintptr_t</span> dest_addr = (<span class="keyword">uintptr_t</span>)dest;</span><br><span class="line">  <span class="keyword">uintptr_t</span> offset = dest_addr % <span class="keyword">sizeof</span>(jint);</span><br><span class="line">  <span class="keyword">volatile</span> jint* dest_int = (<span class="keyword">volatile</span> jint*)(dest_addr - offset);</span><br><span class="line">  jint cur = *dest_int;</span><br><span class="line">  jbyte* cur_as_bytes = (jbyte*)(&amp;cur);</span><br><span class="line">  jint new_val = cur;</span><br><span class="line">  jbyte* new_val_as_bytes = (jbyte*)(&amp;new_val);</span><br><span class="line">  new_val_as_bytes[offset] = exchange_value;</span><br><span class="line">  <span class="keyword">while</span> (cur_as_bytes[offset] == compare_value) &#123;</span><br><span class="line">    jint res = cmpxchg(new_val, dest_int, cur);</span><br><span class="line">    <span class="keyword">if</span> (res == cur) <span class="keyword">break</span>;</span><br><span class="line">    cur = res;</span><br><span class="line">    new_val = cur;</span><br><span class="line">    new_val_as_bytes[offset] = exchange_value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cur_as_bytes[offset];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终根据具体的处理器架构转换成汇编指令来实现CAS。当多处理器时需要在前面加上lock指令。这里的cmpxchgl是x86和Intel架构中的compare and exchange指令。在实际执行时，CPU可以通过锁总线或锁缓存:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inline jint     Atomic::cmpxchg    (jint     exchange_value, volatile jint*     dest, jint     compare_value) &#123;</span><br><span class="line">  int mp = os::is_MP();</span><br><span class="line">  __asm__ volatile (LOCK_IF_MP(%4) &quot;cmpxchgl %1,(%3)&quot;</span><br><span class="line">                    : &quot;=a&quot; (exchange_value)</span><br><span class="line">                    : &quot;r&quot; (exchange_value), &quot;a&quot; (compare_value), &quot;r&quot; (dest), &quot;r&quot; (mp)</span><br><span class="line">                    : &quot;cc&quot;, &quot;memory&quot;);</span><br><span class="line">  return exchange_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码说明：<br>volatile：禁止该读写指令重排序<br>LOCK_IF_MP：MP表示多核，如果为多核则为cmpxchg指令添加lock前缀，实现处理器的原子操作</p><h2 id="4-ABA问题"><a href="#4-ABA问题" class="headerlink" title="4. ABA问题"></a>4. ABA问题</h2><p>CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了，这就是 ABA 问题。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一。AtomicStampedReference来解决ABA问题。这个类的 compareAndSet 方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值，其源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicStampedReference</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> T reference;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> stamp;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Pair</span><span class="params">(T reference, <span class="keyword">int</span> stamp)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.reference = reference;</span><br><span class="line">            <span class="keyword">this</span>.stamp = stamp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> &lt;T&gt; <span class="function">Pair&lt;T&gt; <span class="title">of</span><span class="params">(T reference, <span class="keyword">int</span> stamp)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;T&gt;(reference, stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V   expectedReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 V   newReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> expectedStamp,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> newStamp)</span> </span>&#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            expectedReference == current.reference &amp;&amp;</span><br><span class="line">            expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">            ((newReference == current.reference &amp;&amp;</span><br><span class="line">              newStamp == current.stamp) ||</span><br><span class="line">             casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">casPair</span><span class="params">(Pair&lt;V&gt; cmp, Pair&lt;V&gt; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, pairOffset, cmp, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> 总结 </strong><br>cas 是 concurrent 包的基础，concurrent包中的源代码实现，会发现一个通用化的实现模式：<br>通过 olatile 声明共享变量，使用 CAS 的原子条件更新来实现线程之间的同步，最终通过 volatile 与 CAS 读/写内存原子语义来实现线程之间的通信。</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>volatile 实现机制分析</title>
      <link href="/2018/08/28/volatile%20%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
      <url>/2018/08/28/volatile%20%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在上篇总结了<a href="http://localhost:4000/2018/08/27/java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">JMM</a>理论基础，在本篇要分析 volatile 的实现机制。首先看下下面代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyInitializedSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> LazyInitializedSingleton instance;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">LazyInitializedSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyInitializedSingleton <span class="title">getInstanceUsingDoubleLocking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(instance )) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (LazyInitializedSingleton.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(instance )) &#123;</span><br><span class="line">          <span class="comment">//可能出现重排序导致线程安全问题</span></span><br><span class="line">          instance = <span class="keyword">new</span> LazyInitializedSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>上面代码虽然已经加锁和两次判断，但仍可能因为重排序导致线程安全问题，为什么会发生重排序可以看这篇<a href="http://xxzp.tech/2018/08/26/java%20%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">java 对象分析</a> 。下面安全的单例模式实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckVolatile</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckVolatile instance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckVolatile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckVolatile <span class="title">getInstanceVolatile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(instance)) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (LazyInitializedSingleton.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(instance)) &#123;</span><br><span class="line">          instance = <span class="keyword">new</span> DoubleCheckVolatile();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上段代码之所以可以保证线程安全是因为volatile禁止指令重排序。那 volatile 是如何保证的呢?</p><h2 id="2-volatile-原理分析"><a href="#2-volatile-原理分析" class="headerlink" title="2. volatile 原理分析"></a>2. volatile 原理分析</h2><blockquote><p>volatile是通过 JMM 内存屏障（memory barrier）来禁止重排序</p></blockquote><p>Java 内存模型是通过内存屏障（memory barrier）来禁止重排序的。对于即时编译器来说，它会对每一个 happens-before 关系，向正在编译的目标方法中插入相应的读读、读写、写读以及写写内存屏障。</p><p><strong> volatile 变量特性: </strong>(可保证一定的有序性，不能保证原子性)：</p><ul><li>可见性：对一个 volatile 变量的读，总是能看到（任意线程）对这个 volatile 变量最后的写入。</li><li>原子性：对任意单个 volatile 变量的读/写具有原子性，但类似于 volatile++ 这种复合操作不具有原子性。</li></ul><h3 id="2-1-volatile-的-happens-before-语义"><a href="#2-1-volatile-的-happens-before-语义" class="headerlink" title="2.1 volatile 的 happens before 语义"></a>2.1 volatile 的 happens before 语义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;                   <span class="comment">//1</span></span><br><span class="line">    flag = <span class="keyword">true</span>;             <span class="comment">//2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;             <span class="comment">//3</span></span><br><span class="line">      <span class="keyword">int</span> i =  a;           <span class="comment">//4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 happens before 规则，上面过程建立的 happens before 关系可以总结如下：</p><ul><li>根据程序次序规则，1 happens before 2; 3 happens before 4。</li><li>根据 volatile 规则，2 happens before 3。</li><li>根据 happens before 的传递性规则，1 happens before 4。</li></ul><p>对于上面代码 A 线程执行 writer() 方法之后，线程 B  线程执行 reader() 方法：A 线程写一个 volatile 变量后，B 线程读同一个 volatile 变量。A 线程在写volatile 变量之前所有可见的共享变量，在 B 线程读同一个 volatile 变量后，将立即变得对B线程可见。</p><h3 id="2-2-volatile-读写的内存语义"><a href="#2-2-volatile-读写的内存语义" class="headerlink" title="2.2 volatile 读写的内存语义"></a>2.2 volatile 读写的内存语义</h3><p><img src="/img/jmm1.png" alt=""></p><p><strong> volatile 写 </strong> 当写一个 volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量刷新到主内存。 以上面代码为例，假设线程 A 首先执行 writer() 方法，随后线程 B 执行 reader() 方法，初始时两个线程的本地内存中的 flag 和 a 都是初始状态，如上图1步骤。<br><strong> volatile 读 </strong> 当读一个 volatile 变量时，JMM 会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取共享变量。</p><p><strong> volatile 读写总结 </strong></p><ul><li>线程 A 写一个 volatile 变量，实质上是线程 A 向接下来将要读这个 volatile 变量的某个线程发出了（其对共享变量所在修改的）消息。</li><li>线程 B 读一个 volatile 变量，实质上是线程 B 接收了之前某个线程发出的（在写这个volatile 变量之前对共享变量所做修改的）消息。</li><li>线程A写一个 volatile 变量，随后线程 B 读这个 volatile 变量，这个过程实质上是线程A 通过主内存向线程 B 发送消息。</li></ul><h3 id="2-3-JMM-如何实现-volatile-写-读"><a href="#2-3-JMM-如何实现-volatile-写-读" class="headerlink" title="2.3 JMM 如何实现 volatile 写/读"></a>2.3 JMM 如何实现 volatile 写/读</h3><p><strong> 编译器重排序: </strong><br>JMM 针对编译器制定的 volatile 重排序规则如下表：</p><p><img src="/img/store-load.png" alt=""></p><p>从上表我们可以看出：</p><ul><li>当第二个操作是 volatile 写时，不管第一个操作是什么，都不能重排序。这个规则确保volatile 写之前的操作不会被编译器重排序到 volatile 写之后。</li><li>当第一个操作是 volatile 读时，不管第二个操作是什么，都不能重排序。这个规则确保volatile 读之后的操作不会被编译器重排序到 volatile 读之前。</li><li>当第一个操作是 volatile 写，第二个操作是 volatile 读时，不能重排序。</li></ul><p><strong> 编译器重排序 </strong> 发现一个最优布置来最小化插入屏障的总数几乎不可能。为此，JMM 采取保守策略，下面是基于保守策略的 JMM 内存屏障插入策略：</p><ul><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li></ul><p><strong> 总结：</strong><br>volatile 仅仅保证对单个 volatile 变量的读/写具有原子性，而锁的互斥执行的特性可以确保对整个临界区代码的执行具有原子性。在功能上，锁比 volatile 更强大；在可伸缩性和执行性能上，volatile 更有优势。</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>synchronized 实现机制分析</title>
      <link href="/2018/08/28/%20synchronized%20%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
      <url>/2018/08/28/%20synchronized%20%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>synchronized 关键字用来对程序进行加锁，它既可以用来声明一个 synchronized 代码块，也可以直接标记静态方法或者实例方法，被 synchronized 可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。先通过一段代码看下 jvm 层面的控制：<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    o.hashCode();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">      o.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是反汇编的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public desinpattern.singleton.SynchronizedTest();</span><br><span class="line">descriptor: ()V</span><br><span class="line">flags: ACC_PUBLIC</span><br><span class="line">Code:</span><br><span class="line">    stack=1, locals=1, args_size=1</span><br><span class="line">        0: aload_0</span><br><span class="line">        1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">    line 3: 0</span><br><span class="line"></span><br><span class="line">private synchronized void test(java.lang.Object);</span><br><span class="line">descriptor: (Ljava/lang/Object;)V</span><br><span class="line">flags: ACC_PRIVATE, ACC_SYNCHRONIZED</span><br><span class="line">Code:</span><br><span class="line">    stack=1, locals=2, args_size=2</span><br><span class="line">        0: aload_1</span><br><span class="line">        1: invokevirtual #2                  // Method java/lang/Object.hashCode:()I</span><br><span class="line">        4: pop</span><br><span class="line">        5: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">    line 6: 0</span><br><span class="line">    line 7: 5</span><br><span class="line"></span><br><span class="line">private void test1(java.lang.Object);</span><br><span class="line">descriptor: (Ljava/lang/Object;)V</span><br><span class="line">flags: ACC_PRIVATE</span><br><span class="line">Code:</span><br><span class="line">    stack=2, locals=4, args_size=2</span><br><span class="line">        0: aload_1</span><br><span class="line">        1: dup</span><br><span class="line">        2: astore_2</span><br><span class="line">        3: monitorenter</span><br><span class="line">        4: aload_1</span><br><span class="line">        5: invokevirtual #2                  // Method java/lang/Object.hashCode:()I</span><br><span class="line">        8: pop</span><br><span class="line">        9: aload_2</span><br><span class="line">    10: monitorexit</span><br><span class="line">    11: goto          19</span><br><span class="line">    14: astore_3</span><br><span class="line">    15: aload_2</span><br><span class="line">    16: monitorexit</span><br><span class="line">    17: aload_3</span><br><span class="line">    18: athrow</span><br><span class="line">    19: return</span><br><span class="line">    Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            4    11    14   any</span><br><span class="line">        14    17    14   any</span><br><span class="line">    LineNumberTable:</span><br><span class="line">    line 10: 0</span><br><span class="line">    line 11: 4</span><br><span class="line">    line 12: 9</span><br><span class="line">    line 13: 19</span><br><span class="line">    StackMapTable: number_of_entries = 2</span><br><span class="line">    frame_type = 255 /* full_frame */</span><br><span class="line">        offset_delta = 14</span><br><span class="line">        locals = [ class desinpattern/singleton/SynchronizedTest, class java/lang/Object, class java/lang/Object ]</span><br><span class="line">        stack = [ class java/lang/Throwable ]</span><br><span class="line">    frame_type = 250 /* chop */</span><br><span class="line">        offset_delta = 4</span><br></pre></td></tr></table></figure><p>在 synchronized 修饰代码块的时候，上面的字节码中包含一个 monitorenter 指令以及多个 monitorexit 指令，因为 Java 虚拟机需要确保所获得的锁在正常执行路径，以及异常执行路径上都能够被解锁。<br>在修饰方法时，字节码中方法的访问标记包括 ACC_SYNCHRONIZED。该标记表示在进入该方法时，Java 虚拟机需要进行 monitorenter 操作。而在退出该方法时，不管是正常返回，还是向调用者抛异常，Java 虚拟机均需要进行 monitorexit 操作。这里 monitorenter 和 monitorexit 操作所对应的锁对象是隐式的。</p><h2 id="2-实现原理分析（monitor）"><a href="#2-实现原理分析（monitor）" class="headerlink" title="2. 实现原理分析（monitor）"></a>2. 实现原理分析（monitor）</h2><p>synchronized 在Java虚拟机中由monitor entry 和 exit实现，或者显式地通过使用monitorenter和monitorexit指令(by use of the monitorenter and monitorexit instructions)或者隐式地通过方法调用和返回指令（by the method invocation and return instructions）实现，而 monitor 与对象密切相关 <a href="http://xxzp.tech/2018/08/26/java%20%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">(java 对象分析)</a>。</p><p>我们先看下 Monitor 的构造函数(Monitor.cpp)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Monitor::Monitor(jvmtiEnv *jvmti, JNIEnv *env, jobject object)</span><br><span class="line">&#123;</span><br><span class="line">    jvmtiError err;</span><br><span class="line">    jclass     klass;</span><br><span class="line">    <span class="keyword">char</span>      *signature;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Clear counters */</span></span><br><span class="line">    contends  = <span class="number">0</span>;</span><br><span class="line">    waits     = <span class="number">0</span>;</span><br><span class="line">    timeouts  = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Get the class name for this monitor object */</span></span><br><span class="line">    (<span class="keyword">void</span>)<span class="built_in">strcpy</span>(name, <span class="string">"Unknown"</span>);</span><br><span class="line">    klass = env-&gt;GetObjectClass(object);</span><br><span class="line">    <span class="keyword">if</span> ( klass == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        fatal_error(<span class="string">"ERROR: Cannot find jclass from jobject\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    err = jvmti-&gt;GetClassSignature(klass, &amp;signature, <span class="literal">NULL</span>);</span><br><span class="line">    check_jvmti_error(jvmti, err, <span class="string">"get class signature"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( signature != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        (<span class="keyword">void</span>)<span class="built_in">strncpy</span>(name, signature, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(name)<span class="number">-1</span>);</span><br><span class="line">        deallocate(jvmti, signature);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可看到每个对象都存在着一个 monitor 与之关联，对象与其 monitor 之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 monitor 被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor 是由 ObjectMonitor 实现的，其主要数据结构如下(ObjectMonitor.hpp)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ObjectMonitor() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>;</span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;</span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>;</span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>;</span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ;</span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">    _previous_owner_tid = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong> ObjectMonitor结构简单说明：</strong><br>_WaitSet与 _EntryList：用来保存ObjectWaiter对象列表，每个等待锁的线程都会被封装成ObjectWaiter对象<br>_owner：指向持有ObjectMonitor对象的线程</p><p><strong> monitor同步过程：</strong><br>当多个线程同时访问一段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的 monitor 后进入 _Owner 区域并把 monitor 中的 owner 变量设置为当前线程同时 monitor 中的计数器 count 加1，若线程调用 wait() 方法，将释放当前持有的 monitor，owner 变量恢复为null，count 自减1，同时该线程进入 WaitSet 集合中等待被唤醒。若当前线程执行完毕也将释放 monitor 并复位变量的值，以便其他线程进入获取 monitor。如下图：</p><p><img src="/img/monitor.png" alt=""></p><p>加锁过程核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ATTR ObjectMonitor::enter(TRAPS) &#123;</span><br><span class="line"></span><br><span class="line">  Thread * <span class="keyword">const</span> Self = THREAD ;</span><br><span class="line">  <span class="keyword">void</span> * cur ;</span><br><span class="line">  <span class="comment">//通过CAS尝试把monitor的`_owner`字段设置为当前线程</span></span><br><span class="line">  cur = Atomic::cmpxchg_ptr (Self, &amp;_owner, <span class="literal">NULL</span>) ;</span><br><span class="line">  </span><br><span class="line">  ...省略部分代码...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果当前线程是第一次进入该monitor，设置_recursions为1，_owner为当前线程</span></span><br><span class="line">  <span class="keyword">if</span> (cur == Self) &#123;</span><br><span class="line">     <span class="comment">// TODO-<span class="doctag">FIXME:</span> check for integer overflow!  BUGID 6557169.</span></span><br><span class="line">     _recursions ++ ;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前线程是第一次进入该monitor，设置_recursions为1，_owner为当前线程</span></span><br><span class="line">  <span class="keyword">if</span> (Self-&gt;is_lock_owned ((address)cur)) &#123;</span><br><span class="line">    assert (_recursions == <span class="number">0</span>, <span class="string">"internal state error"</span>);</span><br><span class="line">    _recursions = <span class="number">1</span> ;</span><br><span class="line">    <span class="comment">// Commute owner from a thread-specific on-stack BasicLockObject address to</span></span><br><span class="line">    <span class="comment">// a full-fledged "Thread *".</span></span><br><span class="line">    _owner = Self ;</span><br><span class="line">    OwnerIsThread = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过cas计数</span></span><br><span class="line">  Atomic::inc_ptr(&amp;_count);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过自旋执行ObjectMonitor::EnterI方法等待锁的释放</span></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      jt-&gt;set_suspend_equivalent();</span><br><span class="line">      <span class="comment">// cleared by handle_special_suspend_equivalent_condition()</span></span><br><span class="line">      <span class="comment">// or java_suspend_self()</span></span><br><span class="line"></span><br><span class="line">      EnterI (THREAD) ;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!ExitSuspendEquivalent(jt)) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// We have acquired the contended monitor, but while we were</span></span><br><span class="line">      <span class="comment">// waiting another thread suspended us. We don't want to enter</span></span><br><span class="line">      <span class="comment">// the monitor while suspended because that would surprise the</span></span><br><span class="line">      <span class="comment">// thread that suspended us.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">          _recursions = <span class="number">0</span> ;</span><br><span class="line">      _succ = <span class="literal">NULL</span> ;</span><br><span class="line">      <span class="built_in">exit</span> (<span class="literal">false</span>, Self) ;</span><br><span class="line"></span><br><span class="line">      jt-&gt;java_suspend_self();</span><br><span class="line">    &#125;</span><br><span class="line">    Self-&gt;set_current_pending_monitor(<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可看出，在加锁的过程中大量用到了cas，这也是1.6后对synchronized的优化，其实在锁释放的过程也是通过cas去处理的，具体细节不再描述。</p><h3 id="3-锁优化"><a href="#3-锁优化" class="headerlink" title="3. 锁优化"></a>3. 锁优化</h3><p><strong> 自旋锁：</strong> 让线程等待一段时间（死循环），不会被立即挂起，看持有锁的线程是否会很快释放锁，不会产生上下文切换。<br><strong> 适应自旋锁：</strong> 对自旋锁的优化，自旋的次数不再是固定的，由上一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。<br><strong> 锁消除：</strong> JVM检测到不可能存在共享数据竞争，这是JVM会对这些同步锁进行锁消除。<br><strong> 锁粗化：</strong> 仅在共享数据的实际作用域中才进行同步，减少锁竞争带来的上下文切换，最常见的如jdk1.7 ConcurrentHashMap 的分段锁。<br><strong> 锁升级：</strong> 无锁状态 –&gt; 偏向锁状态 –&gt; 轻量级锁状态 –&gt; 重量级锁状态</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java 内存模型分析</title>
      <link href="/2018/08/27/java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/08/27/java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在多核系统中，处理器一般都会有一层或者多层的缓存，这些的缓存通过加速数据访问和降低共享内存在总线上的通讯来提高CPU性能。这就导致并发编程必须面临两个关键问题：线程通信及线程同步。</p><p><strong>线程通信</strong> 命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p><ul><li>共享内存：线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。</li><li>消息传递的并发模型里：线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</li></ul><p><strong>线程同步</strong> 指程序用于控制不同线程之间操作发生相对顺序的机制。<br>Java 的并发模型采用的是共享内存模型，Java 线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。JMM 通过控制主内存与每个线程的本地内存之间的交互，来为 java 程序员提供内存可见性保证。<br><a id="more"></a></p><h2 id="2-JMM-抽象结构"><a href="#2-JMM-抽象结构" class="headerlink" title="2. JMM 抽象结构"></a>2. JMM 抽象结构</h2><p>JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。在实现通信必须经过两个过程：线程A把本地内存A中更新过的共享变量刷新到主内存中去，线程B到主内存中去读取线程A之前已更新过的共享变量。其结构如下：</p><p><img src="/img/jmm2.png" alt=""></p><h2 id="3-多线程面临的问题"><a href="#3-多线程面临的问题" class="headerlink" title="3. 多线程面临的问题"></a>3. 多线程面临的问题</h2><p>由上面抽象结构可知，在多线程情况下必须面对两个问题：缓存一致性问题与重排序问题。<br><strong>缓存一致性问题：</strong><br>一个线程更新共享对象可能对其它线程来说是不可见的：共享对象被初始化在主存中。跑在CPU上的一个线程将这个共享对象读到CPU缓存中，然后修改了这个对象。只要CPU缓存没有被刷新会主存，对象修改后的版本对跑在其它CPU上的线程都是不可见的。这种方式可能导致每个线程拥有这个共享对象的私有拷贝，每个拷贝停留在不同的CPU缓存中。<br><strong>重排序问题：</strong><br>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p><ul><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。<br>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</li></ul><p><img src="/img/jmm5.png" alt=""><br>而重排序都可能会导致多线程程序出现内存可见性问题。</p><h2 id="4-JMM-实现语义"><a href="#4-JMM-实现语义" class="headerlink" title="4. JMM 实现语义"></a>4. JMM 实现语义</h2><h3 id="4-1-as-if-serial"><a href="#4-1-as-if-serial" class="headerlink" title="4.1 as-if-serial"></a>4.1 as-if-serial</h3><p>不管怎么重排序，（单线程）程序的执行结果不能被改变。编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作可能被编译器和处理器重排序。as-if-serial 语义把单线程程序保护了起来，遵守 as-if-serial 语义的编译器，runtime 和处理器共同为编写单线程程序的程序员创建了一个幻觉：单线程程序是按程序的顺序来执行的。as-if-serial 语义使单线程程序员无需担心重排序会干扰他们，也无需担心内存可见性问题。</p><h3 id="4-2-happens-before"><a href="#4-2-happens-before" class="headerlink" title="4.2 happens before"></a>4.2 happens before</h3><p>JSR-133 使用 happens-before 的概念来阐述操作之间的内存可见性。在 JMM 中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。happens-before 仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前。其具体规则如下：</p><ul><li>程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。</li><li>监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。</li><li>volatile 变量规则：对一个 volatile 域的写，happens- before 于任意后续对这个 volatile 域的读。</li><li>传递性：如果 A happens- before B，且 B happens- before C，那么 A happens- before C。</li></ul><h3 id="4-3-内存屏障"><a href="#4-3-内存屏障" class="headerlink" title="4.3 内存屏障"></a>4.3 内存屏障</h3><p>java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。其指令描述如下：</p><table><thead><tr><th>屏障类型</th><th>指令示例</th><th>说明</th></tr></thead><tbody><tr><td>LoadLoad Barriers</td><td>Load1; LoadLoad; Load2</td><td>确保Load1数据的装载，之前于Load2及所有后续装载指令的装载</td></tr><tr><td>StoreStore Barriers</td><td>Store1; StoreStore; Store2</td><td>确保Store1数据对其他处理器可见（刷新到内存），之前于Store2及所有后续存储指令的存储</td></tr><tr><td>LoadStore Barriers</td><td>Load1; LoadStore; Store2</td><td>确保Load1数据装载，之前于Store2及所有后续的存储指令刷新到内存</td></tr><tr><td>StoreLoad Barriers</td><td>Store1; StoreLoad; Load2</td><td>确保Store1数据对其他处理器变得可见（指刷新到内存），之前于Load2及所有后续装载指令的装载。StoreLoad Barriers会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令</td></tr></tbody></table><h3 id="4-4-顺序一致性"><a href="#4-4-顺序一致性" class="headerlink" title="4.4 顺序一致性"></a>4.4 顺序一致性</h3><p>如果程序是正确同步的，程序的执行将具有顺序一致性（sequentially consistent）–即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同（马上我们将会看到，这对于程序员来说是一个极强的保证）。这里的同步是指广义上的同步，包括对常用同步原语（lock，volatile 和 final）的正确使用。其两大特性：</p><ul><li>一个线程中的所有操作必须按照程序的顺序来执行。</li><li>所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见。<br>顺序一致性模型有一个单一的全局内存，这个内存通过一个左右摆动的开关可以连接到任意一个线程。同时，每一个线程必须按程序的顺序来执行内存读/写操作。如下图，最终保持B1-&gt;A1-&gt;A2-&gt;B2-&gt;A3-&gt;B3就能得到这个保证是因为顺序一致性内存模型中的每个操作必须立即对任意线程可见。</li></ul><p><img src="/img/jmm6.png" alt=""></p><p>对于未同步或未正确同步的多线程程序，JMM 只提供最小安全性：线程执行时读取到的值，要么是之前某个线程写入的值，要么是默认值（0，null，false），JMM 保证线程读操作读取到的值不会无中生有（out of thin air）的冒出来。为了实现最小安全性，JVM 在堆上分配对象时，首先会清零内存空间，然后才会在上面分配对象（JVM内部会同步这两个操作）。因此，在以清零的内存空间（pre-zeroed memory）分配对象时，域的默认初始化已经完成了。</p><ul><li>顺序一致性模型保证单线程内的操作会按程序的顺序执行，而 JMM 不保证单线程内的操作会按程序的顺序执行（比如上面正确同步的多线程程序在临界区内的重排序）。这一点前面已经讲过了，这里就不再赘述。</li><li>顺序一致性模型保证所有线程只能看到一致的操作执行顺序，而JMM不保证所有线程能看到一致的操作执行顺序。这一点前面也已经讲过，这里就不再赘述。</li><li>JMM不保证对64位的 long 型和 double 型变量的读/写操作具有原子性，而顺序一致性模型保证对所有的内存读/写操作都具有原子性。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java 对象分析</title>
      <link href="/2018/08/26/java%20%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/"/>
      <url>/2018/08/26/java%20%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-常见-java-对象创建方式"><a href="#1-常见-java-对象创建方式" class="headerlink" title="1. 常见 java 对象创建方式"></a>1. 常见 java 对象创建方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user1 = User.class.newInstance();</span><br><span class="line">User user2 = (User) Class.forName(<span class="string">"com.xxzp.ares.utils.reflect.TestReflect"</span>).newInstance();</span><br><span class="line">User user3 = User.class.getConstructor().newInstance(<span class="number">1245L</span>, <span class="string">"test"</span>);</span><br><span class="line">User user4 = (User) user1.clone();<span class="comment">//需继承Cloneable与重写clone()方法</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-Java-对象的创建过程"><a href="#2-Java-对象的创建过程" class="headerlink" title="2. Java 对象的创建过程"></a>2. Java 对象的创建过程</h2><p>java 语言中的数据类型主要分为基本类型和引用类型：<br>基本类型：由 jvm 直接定义<br>引用类型：类、接口、数组类和泛型参数，其中泛型会进行类型擦除，因此可以算作三种，类和接口直接生成对应的字节流，数组类是由 jvm 直接生成。</p><p><strong>对象创建过程：</strong> </p><ul><li>检查常量池中对应的类引用是否已加载、解析和初始化，如没有则执行类加载过程。</li><li>为新生对象分配内存:（指针碰撞，空闲列表）解决并发内存分配策略：CAS,本地线程分配缓冲</li><li>将分配到的对象在内存中都初始化为零值</li><li>设置对象信息：元数据信息，对象哈希码，gc分代信息，锁信息</li><li>执行<init>方法，初始化对象</init></li></ul><h2 id="3-java-对象内存"><a href="#3-java-对象内存" class="headerlink" title="3. java 对象内存"></a>3. java 对象内存</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">oopDesc</span> &#123;</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStructs</span>;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">volatile</span> markOop  _mark; <span class="comment">//运行时标识</span></span><br><span class="line">  <span class="keyword">union</span> _metadata &#123;</span><br><span class="line">    Klass*      _klass;</span><br><span class="line">    narrowKlass _compressed_klass;</span><br><span class="line">  &#125; _metadata;  <span class="comment">//klass指针</span></span><br></pre></td></tr></table></figure><p>对象在内存中存储的布局可以分为三块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）</p><h3 id="3-1-Object-head：Mark-Word-与-Klass"><a href="#3-1-Object-head：Mark-Word-与-Klass" class="headerlink" title="3.1 Object head：Mark Word 与 Klass"></a>3.1 Object head：Mark Word 与 Klass</h3><p><strong>Mark Word:</strong> 主要包含对象自身运行时数据:哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机中分别为32个和64个Bits。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span> bits:</span><br><span class="line">  --------</span><br><span class="line">             hash:<span class="number">25</span> ------------&gt;| age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (normal object)</span><br><span class="line">             JavaThread*:<span class="number">23</span> epoch:<span class="number">2</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (biased object)</span><br><span class="line">             size:<span class="number">32</span> ------------------------------------------&gt;| (CMS <span class="built_in">free</span> block)</span><br><span class="line">             PromotedObject*:<span class="number">29</span> ----------&gt;| promo_bits:<span class="number">3</span> -----&gt;| (CMS promoted object)</span><br><span class="line"></span><br><span class="line"><span class="number">64</span> bits:</span><br><span class="line">  --------</span><br><span class="line">  unused:<span class="number">25</span> hash:<span class="number">31</span> --&gt;| unused:<span class="number">1</span>   age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (normal object)</span><br><span class="line">  JavaThread*:<span class="number">54</span> epoch:<span class="number">2</span> unused:<span class="number">1</span>   age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (biased object)</span><br><span class="line">  PromotedObject*:<span class="number">61</span> ---------------------&gt;| promo_bits:<span class="number">3</span> -----&gt;| (CMS promoted object)</span><br><span class="line">  size:<span class="number">64</span> -----------------------------------------------------&gt;| (CMS <span class="built_in">free</span> block)</span><br><span class="line"></span><br><span class="line">  unused:<span class="number">25</span> hash:<span class="number">31</span> --&gt;| cms_free:<span class="number">1</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (COOPs &amp;&amp; normal object)</span><br><span class="line">  JavaThread*:<span class="number">54</span> epoch:<span class="number">2</span> cms_free:<span class="number">1</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (COOPs &amp;&amp; biased object)</span><br><span class="line">  narrowOop:<span class="number">32</span> unused:<span class="number">24</span> cms_free:<span class="number">1</span> unused:<span class="number">4</span> promo_bits:<span class="number">3</span> -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span><br><span class="line">  unused:<span class="number">21</span> size:<span class="number">35</span> --&gt;| cms_free:<span class="number">1</span> unused:<span class="number">7</span> ------------------&gt;| (COOPs &amp;&amp; CMS <span class="built_in">free</span> block)</span><br></pre></td></tr></table></figure></p><p>对象锁信息如下：</p><p><img src="/img/虚拟机对象头.png" alt=""></p><p><strong>Klass:</strong> 对象指向它的类的元数据的指针,但是并不是所有的虚拟机实现都必须在对象数据上保留类型指针，查找对象的元数据信息并不一定要经过对象本身。如java数组，对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中无法确定数组的大小。</p><h3 id="3-2-Instance-Data"><a href="#3-2-Instance-Data" class="headerlink" title="3.2 Instance Data"></a>3.2 Instance Data</h3><p>实例数据部分是对象真正存储的有效信息，即程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的都需要记录下来。 这部分的存储顺序会受到虚拟机分配策略参数（FieldsAllocationStyle）和字段在Java源码中定义顺序的影响。HotSpot虚拟机 默认的分配策略为longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers），从分配策略中可以看出，相同宽度的字段总是被分配到一起。在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。如果 CompactFields参数值为true（默认为true），那子类之中较窄的变量也可能会插入到父类变量的空隙之中。</p><h3 id="3-3-Padding"><a href="#3-3-Padding" class="headerlink" title="3.3 Padding"></a>3.3 Padding</h3><p>对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。对象头正好是8字节的倍数（1倍或者2倍），因此当对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p><p><strong>指针压缩与内存对齐：</strong></p><p>64 位的 Java 虚拟机中，对象头的标记字段占 64 位，而类型指针又占了 64 位。也就是说，每一个 Java 对象在内存中的额外开销就是 16 个字节。64 位 Java 虚拟机引入了压缩指针，将堆中原本 64 位的 Java 对象指针压缩成 32 位。对象头中的类型指针也会被压缩成 32 位，使得对象头的大小从 16 字节降至 12 字节。</p><p>Java 虚拟机重新分配字段的先后顺序，以达到内存对齐的目的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PandingTestA</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">  <span class="keyword">private</span> Long c=<span class="number">30L</span>;</span><br><span class="line">  <span class="keyword">private</span> Integer d=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(ClassLayout.parseInstance(<span class="keyword">new</span> PandingTestA()).toPrintable());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>对象内存结构测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PandingTestA object internals:</span><br><span class="line">Disconnected from the target VM, address: <span class="string">'127.0.0.1:52668'</span>, transport: <span class="string">'socket'</span></span><br><span class="line"> OFFSET  SIZE                TYPE DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>                     (object header)                           <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000001</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">1</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>                     (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>                     (object header)                           <span class="number">05</span> c1 <span class="number">00</span> f8 (<span class="number">00000101</span> <span class="number">11000001</span> <span class="number">00000000</span> <span class="number">11111000</span>) (-<span class="number">134168315</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>                 <span class="keyword">int</span> PandingTestA.b                            <span class="number">20</span></span><br><span class="line">     <span class="number">16</span>     <span class="number">8</span>                <span class="keyword">long</span> PandingTestA.a                            <span class="number">10</span></span><br><span class="line">     <span class="number">24</span>     <span class="number">4</span>      java.lang.Long PandingTestA.c                            <span class="number">30</span></span><br><span class="line">     <span class="number">28</span>     <span class="number">4</span>   java.lang.Integer PandingTestA.d                            <span class="number">10</span></span><br><span class="line">Instance size: <span class="number">32</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">0</span> bytes external = <span class="number">0</span> bytes total</span><br></pre></td></tr></table></figure><h2 id="4-对象的访问定位"><a href="#4-对象的访问定位" class="headerlink" title="4. 对象的访问定位"></a>4. 对象的访问定位</h2><h3 id="4-1-指针直接访问"><a href="#4-1-指针直接访问" class="headerlink" title="4.1 指针直接访问"></a>4.1 指针直接访问</h3><p>如果使用直接指针访问的话，Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址</p><p><img src="/img/直接指针访问.jpg" alt=""></p><h3 id="4-2-句柄池访问"><a href="#4-2-句柄池访问" class="headerlink" title="4.2 句柄池访问"></a>4.2 句柄池访问</h3><p>如果使用句柄访问的话，Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据的具体各自的地址信息</p><p><img src="/img/句柄池访问.jpg" alt=""></p><p><strong>区别：</strong></p><ul><li>句柄来访问的最大好处就是reference中存储的是稳定句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而reference本身不需要被修改。 </li><li>直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问的在Java中非常频繁，因此这类开销积小成多也是一项非常可观的执行成本。HotSpot 使用直接指针来访问方式进行对象访问 </li></ul>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lambda 实践总结</title>
      <link href="/2018/08/23/lambda%E5%AE%9E%E8%B7%B5/"/>
      <url>/2018/08/23/lambda%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h2 id="1-按key值过滤："><a href="#1-按key值过滤：" class="headerlink" title="1. 按key值过滤："></a>1. 按key值过滤：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Object&gt; function)</span> </span>&#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; map.putIfAbsent(function.apply(t), Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    User user1 = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"test1"</span>);</span><br><span class="line">    User user2 = <span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"test2"</span>);</span><br><span class="line">    User user3 = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"test1"</span>);</span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(user1, user2, user3);</span><br><span class="line">    List&lt;User&gt; userList = users.stream()</span><br><span class="line">        .filter(CollectionUtils.distinctByKey(u -&gt; u.getUserId().toString() + u.getUserName()))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User:&#123;userId:1, userName:test1&#125;</span><br><span class="line">User:&#123;userId:2, userName:test2&#125;</span><br></pre></td></tr></table></figure><h2 id="2-lambda自定义捕获异常"><a href="#2-lambda自定义捕获异常" class="headerlink" title="2. lambda自定义捕获异常"></a>2. lambda自定义捕获异常</h2><p>在如下场景中，我们使用 lambda表达式处理异常，代码就显得很不优雅。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    User user1 = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"test1"</span>);</span><br><span class="line">    User user2 = <span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"test2"</span>);</span><br><span class="line">    User user3 = <span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"test3"</span>);</span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(user1, user2, user3);</span><br><span class="line">    List&lt;String&gt; strings = users.stream().map(u -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getUserName(u);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getUserName</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (user.getUserId() == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"test exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printUserInfo</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (user.getUserId() == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"test exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优化：使用函数式接口对异常进行封装处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionsUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ExceptionsUtils.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@FunctionalInterface</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UncheckedFunction</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//带默认值的异常封装</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt; <span class="function">Function&lt;T, R&gt; <span class="title">of</span><span class="params">(UncheckedFunction&lt;T, R&gt; function, R defaultR)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(function);</span><br><span class="line">    <span class="keyword">return</span> t -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> function.apply(t);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        logger.error(<span class="string">"处理异常"</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> defaultR;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@FunctionalInterface</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UncheckedConsumer</span>&lt;<span class="title">T</span>, <span class="title">E</span> <span class="keyword">extends</span> <span class="title">Exception</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span> <span class="keyword">throws</span> E</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//不带默认值的异常封装</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Consumer&lt;T&gt; <span class="title">of</span><span class="params">(UncheckedConsumer&lt;T, Exception&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        consumer.accept(i);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        logger.error(<span class="string">"处理异常"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后客户端处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带默认值</span></span><br><span class="line">List&lt;String&gt; strings = users.stream()</span><br><span class="line">        .map(ExceptionsUtils.of(u -&gt; getUserName(u), <span class="string">"exception handle"</span>))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//不带默认值</span></span><br><span class="line">users.forEach(ExceptionsUtils.of(u-&gt;printUserInfo(u)));</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lambda实现机制分析</title>
      <link href="/2018/08/22/lambda%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
      <url>/2018/08/22/lambda%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-lambda代码与反编译"><a href="#1-lambda代码与反编译" class="headerlink" title="1. lambda代码与反编译"></a>1. lambda代码与反编译</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambda</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    println1();</span><br><span class="line">    println2();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">    consumer.accept(<span class="string">"test"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = str -&gt; System.out.println(str);</span><br><span class="line">    consumer.accept(<span class="string">"test"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>javap -c -p -v Lambda 查看反编译：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">Classfile /Users/ares/ares/ares/src/main/java/com/xxzp/ares/utils/reflect/Lambda.class</span><br><span class="line">  Last modified <span class="number">2018</span>-<span class="number">8</span>-<span class="number">23</span>; size <span class="number">1371</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">620</span>c826160c973c61dbf9d1b8fd37ad3</span><br><span class="line">  Compiled from <span class="string">"Lambda.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">xxzp</span>.<span class="title">ares</span>.<span class="title">utils</span>.<span class="title">reflect</span>.<span class="title">Lambda</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   ..........<span class="comment">//省略常量池</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.xxzp.ares.utils.reflect.Lambda();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">0</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: invokestatic  #2                  // Method println1:()V</span><br><span class="line">         3: invokestatic  #3                  // Method println2:()V</span><br><span class="line">         <span class="number">6</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PRIVATE, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">0</span></span><br><span class="line">         0: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         4: invokevirtual #5                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span><br><span class="line">         <span class="number">7</span>: pop</span><br><span class="line">         8: invokedynamic #6,  0              // InvokeDynamic #0:accept:(Ljava/io/PrintStream;)Ljava/util/function/Consumer;</span><br><span class="line">        <span class="number">13</span>: astore_0</span><br><span class="line">        <span class="number">14</span>: aload_0</span><br><span class="line">        15: ldc           #7                  // String test</span><br><span class="line">        17: invokeinterface #8,  2            // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V</span><br><span class="line">        <span class="number">22</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">14</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println2</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PRIVATE, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">0</span></span><br><span class="line">         0: invokedynamic #9,  0              // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;</span><br><span class="line">         <span class="number">5</span>: astore_0</span><br><span class="line">         <span class="number">6</span>: aload_0</span><br><span class="line">         7: ldc           #7                  // String test</span><br><span class="line">         9: invokeinterface #8,  2            // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V</span><br><span class="line">        <span class="number">14</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">18</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">19</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">20</span>: <span class="number">14</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> lambda$println2$<span class="number">0</span>(java.lang.String);</span><br><span class="line">    descriptor: (Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         <span class="number">3</span>: aload_0</span><br><span class="line">         4: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         <span class="number">7</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">18</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"Lambda.java"</span></span><br><span class="line">InnerClasses:</span><br><span class="line">     public static final #66= #65 of #69; //Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span><br><span class="line">BootstrapMethods:</span><br><span class="line">  0: #32 invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #33 (Ljava/lang/Object;)V</span><br><span class="line">      #34 invokevirtual java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      #35 (Ljava/lang/String;)V</span><br><span class="line">  1: #32 invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #33 (Ljava/lang/Object;)V</span><br><span class="line">      #40 invokestatic com/xxzp/ares/utils/reflect/Lambda.lambda$println2$0:(Ljava/lang/String;)V</span><br><span class="line">      #35 (Ljava/lang/String;)V</span><br></pre></td></tr></table></figure></p><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h2><h3 id="2-1-方法调用指令"><a href="#2-1-方法调用指令" class="headerlink" title="2.1 方法调用指令"></a>2.1 方法调用指令</h3><ul><li><p><strong>invokespecial:</strong> 调用实例构造方法<init>，私有方法和父类方法</init></p></li><li><p><strong>invokestatic:</strong> 调用静态方法</p></li><li><p><strong>invokevirtual:</strong> 调用虚方法</p></li><li><p><strong>invokedynamic:</strong> 运行时动态解析调用，主要是为了支持动态语言的方法调用在jdk7中增加</p></li><li><p><strong>invokeinterface:</strong> 调用接口方法，在运行时再确定一个实现此接口的对象</p></li></ul><p>从上面可以看到，Consumer.ccept 是通过 invokedynamic 去调用的，第一次执行 invokedynamic 指令时，Java 虚拟机会调用该指令所对应的启动方法（BootStrap Method），来生成前面提到的调用点，并且将之绑定至该 invokedynamic 指令中。在之后的运行过程中，Java 虚拟机则会直接调用绑定的调用点所链接的方法句柄。</p><h3 id="2-2-BootstrapMethods与MethodHandle"><a href="#2-2-BootstrapMethods与MethodHandle" class="headerlink" title="2.2 BootstrapMethods与MethodHandle"></a>2.2 BootstrapMethods与MethodHandle</h3><p><strong>BootstrapMethods：</strong> 启动方法是用方法句柄来指定的，这个方法句柄指向一个返回类型为调用点的静态方法，由上面可看到invokedynamic最终通过LambdaMetafactory.metafactory找到目标对象。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0: #32 invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br></pre></td></tr></table></figure></p><p><strong>MethodHandle方法句柄：</strong>强类型的，能够被直接执行的引用，该引用可以指向常规的静态方法或者实例方法，也可以指向构造器或者字段。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_MethodHandle_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u1 reference_kind;</span><br><span class="line">    u2 reference_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>tag: 标记项值为CONSTANT_MethodHandle</li><li>reference_kind：其值必须在1到9的范围内，表示此方法句柄的类型(MethodType)，即其字节码的行为。<ul><li>Field：1 (REF_getField), 2 (REF_getStatic), 3 (REF_putField),  4 (REF_putStatic)</li><li>Method：5 (REF_invokeVirtual), 6 (REF_invokeStatic), 7 (REF_invokeSpecial), 8 (REF_newInvokeSpecial), 9 (REF_invokeInterface)</li></ul></li><li>reference_index：值必须是constant_pool表的有效索引</li></ul><h3 id="2-3-LambdaMetafactory"><a href="#2-3-LambdaMetafactory" class="headerlink" title="2.3 LambdaMetafactory"></a>2.3 LambdaMetafactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CallSite <span class="title">metafactory</span><span class="params">(MethodHandles.Lookup caller,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       String invokedName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       MethodType invokedType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       MethodType samMethodType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       MethodHandle implMethod,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       MethodType instantiatedMethodType)</span><span class="keyword">throws</span> LambdaConversionException </span>&#123;</span><br><span class="line">    AbstractValidatingLambdaMetafactory mf;</span><br><span class="line">    mf = <span class="keyword">new</span> InnerClassLambdaMetafactory(caller, invokedType,</span><br><span class="line">                                         invokedName, samMethodType,</span><br><span class="line">                                         implMethod, instantiatedMethodType,</span><br><span class="line">                                         <span class="keyword">false</span>, EMPTY_CLASS_ARRAY, EMPTY_MT_ARRAY);</span><br><span class="line">    mf.validateMetafactoryArgs();</span><br><span class="line">    <span class="keyword">return</span> mf.buildCallSite();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可看到，metafactory就是核心方法，该方法通过InnerClassLambdaMetafactory每个lambda调用点动态创建一个类内部类的类。</p><h2 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3. 方法引用"></a>3. 方法引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">   consumer.accept(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Consumer&lt;String&gt; consumer = str -&gt; System.out.println(str);</span><br><span class="line">     consumer.accept(<span class="string">"test"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>反汇编结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//println1</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: invokevirtual #5                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span><br><span class="line">       <span class="number">7</span>: pop</span><br><span class="line">       8: invokedynamic #6,  0              // InvokeDynamic #0:accept:(Ljava/io/PrintStream;)Ljava/util/function/Consumer;</span><br><span class="line">      <span class="number">13</span>: astore_0</span><br><span class="line">      <span class="number">14</span>: aload_0</span><br><span class="line">      15: ldc           #7                  // String test</span><br><span class="line">      17: invokeinterface #8,  2            // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V</span><br><span class="line">      <span class="number">22</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//println2</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println2</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    Code:</span><br><span class="line">       0: invokedynamic #9,  0              // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;</span><br><span class="line">       <span class="number">5</span>: astore_0</span><br><span class="line">       <span class="number">6</span>: aload_0</span><br><span class="line">       7: ldc           #7                  // String test</span><br><span class="line">       9: invokeinterface #8,  2            // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V</span><br><span class="line">      <span class="number">14</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> lambda$println2$<span class="number">0</span>(java.lang.String);</span><br><span class="line">    descriptor: (Ljava/lang/String;)V</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       <span class="number">3</span>: aload_0</span><br><span class="line">       4: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">       <span class="number">7</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上现可看到，System.out::println 不会再单独生成一个方法，而 str -&gt; System.out.println(str) 会生成一个 lambda$println2$0 用来保存 Lambda 表达式的内容，其参数列表不仅包含原本 Lambda 表达式的参数，还包含它所捕获的变量。Lambda 表达式是否捕获其他变量，启动方法生成的适配器类以及所链接的方法句柄皆不同。如果该 Lambda 表达式没有捕获其他变量，那么可以认为它是上下文无关的。因此，启动方法将新建一个适配器类的实例，并且生成一个特殊的方法句柄，始终返回该实例。如果该 Lambda 表达式捕获了其他变量，那么每次执行该 invokedynamic 指令，我们都要更新这些捕获了的变量，以防止它们发生了变化。其实二者的区别主要在于是否对变量进行捕获。</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>反射与动态代理</title>
      <link href="/2018/08/21/%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2018/08/21/%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="1-反射概述"><a href="#1-反射概述" class="headerlink" title="1. 反射概述"></a>1. 反射概述</h2><p>Java反射机制可以动态地获取类的结构，动态地调用对象的方法，是java语言一个动态化的机制。其功能场景：</p><ul><li>运行时构造一个类的对象</li><li>运行时获取一个类信息，如方法，属性</li><li>实现动态代理，很多框架都有基于动态代理实现</li></ul><h3 id="1-1-反射获取类信息"><a href="#1-1-反射获取类信息" class="headerlink" title="1.1 反射获取类信息"></a>1.1 反射获取类信息</h3><p>获取类信息方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;TestReflect&gt; clazz1 = TestReflect.class;</span><br><span class="line">Class&lt;?&gt; clazz2 = Class.forName(<span class="string">"com.xxzp.ares.utils.reflect.TestReflect"</span>);</span><br><span class="line">TestReflect testReflect = <span class="keyword">new</span> TestReflect();</span><br><span class="line">Class&lt;?&gt; clazz3 = testReflect.getClass();</span><br></pre></td></tr></table></figure><a id="more"></a><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz1 = TestReflect.class;</span><br><span class="line">    System.out.println(<span class="string">"clazz1:"</span> + clazz1.getName());</span><br><span class="line">    System.out.println(<span class="string">"clazz1类加载器："</span> + clazz1.getClassLoader().getClass().getName());</span><br><span class="line">    Class&lt;?&gt; clazz2 = Class.forName(<span class="string">"com.xxzp.ares.utils.reflect.TestReflect"</span>);</span><br><span class="line">    System.out.println(<span class="string">"clazz2:"</span> + clazz2.getName());</span><br><span class="line">    TestReflect testReflect = <span class="keyword">new</span> TestReflect();</span><br><span class="line">    Class&lt;?&gt; clazz3 = testReflect.getClass();</span><br><span class="line">    System.out.println(<span class="string">"clazz3:"</span> + clazz3.getName());</span><br><span class="line">    <span class="keyword">if</span> (clazz1 == clazz2 &amp;&amp; clazz2 == clazz3) &#123;</span><br><span class="line">      System.out.println(<span class="string">"clazz1==clazz2==clazz3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-基本使用"><a href="#1-2-基本使用" class="headerlink" title="1.2 基本使用"></a>1.2 基本使用</h3><p>反射操作主要涉及java.lang.Class类和java.lang.reflect反射包下的类。</p><p><strong>java.lang.reflect.Constructor：</strong> 获取构造方法，包括自己声名与父类的构造方法，可以实现动态构建对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class类中</span></span><br><span class="line"><span class="comment">//获取所有构造方法包含父类</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getConstructors() <span class="keyword">throws</span> SecurityException</span><br><span class="line"><span class="comment">//获取自己声明的构造方法</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getDeclaredConstructors() <span class="keyword">throws</span> SecurityException</span><br><span class="line"><span class="comment">//获取含特定参数的构造方法包含父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span><span class="keyword">throws</span> NoSuchMethodException, SecurityException</span></span><br><span class="line"><span class="function"><span class="comment">//获取含特定参数自己声明的构造方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span><span class="keyword">throws</span> NoSuchMethodException, SecurityException</span></span><br></pre></td></tr></table></figure></p><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = User.class;</span><br><span class="line">    Constructor&lt;?&gt;[] allConstructors = clazz.getConstructors();</span><br><span class="line">    Constructor&lt;?&gt;[] allDeclaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getConstructor(Long.class, String.class);</span><br><span class="line">    Constructor&lt;?&gt; declaredConstructor = clazz.getDeclaredConstructor(Long.class, String.class);</span><br><span class="line">    Arrays.stream(allConstructors).forEach(System.out::println);</span><br><span class="line">    Arrays.stream(allDeclaredConstructors).forEach(System.out::println);</span><br><span class="line">    System.out.println(constructor);</span><br><span class="line">    System.out.println(declaredConstructor);</span><br><span class="line">    User user=(User) constructor.newInstance(<span class="number">1245L</span>,<span class="string">"test"</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java.lang.reflect.Field：</strong>使用成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Field[] getFields() <span class="keyword">throws</span> SecurityException</span><br><span class="line"><span class="keyword">public</span> Field[] getDeclaredFields() <span class="keyword">throws</span> SecurityException</span><br><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getField</span><span class="params">(String name)</span><span class="keyword">throws</span> NoSuchFieldException, SecurityException </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getDeclaredField</span><span class="params">(String name)</span><span class="keyword">throws</span> NoSuchFieldException, SecurityException</span></span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testField</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = User.class;</span><br><span class="line">    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">    Arrays.stream(fields).forEach(System.out::println);</span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getConstructor(Long.class, String.class);</span><br><span class="line">    User user = (User) constructor.newInstance(<span class="number">1245L</span>, <span class="string">"test"</span>);</span><br><span class="line">    Field declaredField = clazz.getDeclaredField(<span class="string">"userName"</span>);</span><br><span class="line">    declaredField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object object = declaredField.get(user);</span><br><span class="line">    System.out.println(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java.lang.reflect.Method：</strong>使用成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = User.class;</span><br><span class="line">    Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">    Arrays.stream(methods).forEach(System.out::println);</span><br><span class="line">    Method method = clazz.getMethod(<span class="string">"getUser"</span>, Long.class, String.class);</span><br><span class="line">    Object object = method.invoke(<span class="keyword">new</span> User(), <span class="number">12345L</span>, <span class="string">"ares"</span>);</span><br><span class="line">    System.out.println(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-理解反射调用的实现机制-method-invoke-Object-obj-Object…-args"><a href="#2-理解反射调用的实现机制-method-invoke-Object-obj-Object…-args" class="headerlink" title="2. 理解反射调用的实现机制(method.invoke(Object obj, Object… args))"></a>2. 理解反射调用的实现机制(method.invoke(Object obj, Object… args))</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span><span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,InvocationTargetException</span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">           Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">           checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// read volatile</span></span><br><span class="line">   MethodAccessor ma = methodAccessor;             </span><br><span class="line">   <span class="keyword">if</span> (ma == <span class="keyword">null</span>) &#123;</span><br><span class="line">       ma = acquireMethodAccessor();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ma.invoke(obj, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码可以看到，invoke()其实是通过 MethodAccessor 来处理，MethodAccessor 是一个接口，有两个实现：一个通过本地方法来实现反射调用，另一个则使用了委派模式。每个 Method 实例的第一次反射调用都会生成一个委派实现，它所委派的具体实现便是一个本地实现。对于本地实现，jvm内部之后，即可获取 Method 实例所指向方法的具体地址。这时候，反射调用无非就是将传入的参数准备好，然后调用进入目标方法。<br>另外，Java 的反射调用机制还设立了另一种动态生成字节码的实现，直接使用 invoke 指令来调用目标方法。采用委派实现是为了能够在本地实现以及动态实现中切换。<br>动态实现和本地实现两者在不同的场景其效率不同，多次调用则动态实现效率要高，因为无需多次切换，如调一次则本地效率要高，主要因为生成字节码耗时。jvm 默认设置阈值为 15 次则转换为动态，可通过-Dsun.reflect.inflationThreshold 调整</p><h2 id="3-JDK动态代理"><a href="#3-JDK动态代理" class="headerlink" title="3. JDK动态代理"></a>3. JDK动态代理</h2><p><strong>接口</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProxyInterface</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">test</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>实现类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">ProxyInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is dynamic:"</span> + str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>动态代理类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProxyInterface <span class="title">getProxy</span><span class="params">(Class&lt;ProxyInterfaceImpl&gt; implClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ProxyInterface) Proxy.newProxyInstance(implClass.getClassLoader(),</span><br><span class="line">        implClass.getInterfaces(),</span><br><span class="line">        (proxy, method, args) -&gt; method.invoke(implClass.newInstance(), args));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ProxyInterface proxyInterface = getProxy(ProxyInterfaceImpl.class);</span><br><span class="line">    System.out.println(proxyInterface.test(<span class="string">"test"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java类加载机制</title>
      <link href="/2018/08/20/java%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
      <url>/2018/08/20/java%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="1-类加载过程-加载—-gt-链接—-gt-初始化"><a href="#1-类加载过程-加载—-gt-链接—-gt-初始化" class="headerlink" title="1. 类加载过程(加载—&gt;链接—&gt;初始化)"></a>1. 类加载过程(加载—&gt;链接—&gt;初始化)</h2><p><strong>加载：</strong> 是指查找字节流，并且据此创建类的过程。<br><strong>链接：</strong> 是指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。它可分为验证、准备以及解析三个阶段。</p><ul><li>验证：确保被加载类能够满足 Java 虚拟机的约束条件。</li><li>准备：为被加载类的静态字段分配内存。Java 代码中对静态字段的具体初始化，则会在稍后的初始化阶段中进行。</li><li>解析：将符号引用解析成为实际引用，如果符号引用指向一个未被加载的类，或者未被加载类的字段或方法，那么解析将触发这个类的加载</li></ul><p><strong>初始化：</strong> 是指给常量值的字段赋值，以及执行 &lt; clinit &gt; 方法的过程。Java 虚拟机会通过加锁来确保类的 &lt; clinit &gt; 方法仅被执行一次。初始化完成之后，类才正式成为可执行的状态。<br><a id="more"></a></p><h2 id="2-类加载器类型"><a href="#2-类加载器类型" class="headerlink" title="2. 类加载器类型"></a>2. 类加载器类型</h2><p><strong>启动类加载器(Bootstrap ClassLoader)：</strong>启动类加载器主要加载JVM自身需要的类，用C++语言实现，是虚拟机自身的一部分，它负责将 &lt;JAVA_HOME&gt;/lib路径下的核心类库或-Xbootclasspath参数指定的路径下的jar包加载到内存中。</p><p><strong>扩展类加载器(Extension ClassLoader)：</strong> sun.misc.Launcher$ExtClassLoader类，Java语言实现，是Launcher的静态内部类，它负责加载&lt;JAVA_HOME&gt;/lib/ext目录下或者由系统变量-Djava.ext.dir指定位路径中的类库，可以直接使用标准扩展类加载器。</p><p><strong>应用程序类加载器(Application ClassLoader)：</strong>sun.misc.Launcher$AppClassLoader。它负责加载系统类路径java -classpath或-D java.class.path 指定路径下的类库，也就是我们经常用到的classpath路径，开发者可以直接使用系统类加载器，一般情况下该类加载是程序中默认的类加载器，通过ClassLoader#getSystemClassLoader()方法可以获取到该类加载器。 </p><p><strong>自定义类加载器：</strong>来实现特殊的加载方式，在对 class 文件进行加密，加载时再利用自定义的类加载器对其解密等，可以通过继承java.lang.ClassLoader 来实现。自定义类加载器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoad</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestClassLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestClassLoad</span><span class="params">(ClassLoader parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(parent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"com/example/jpa/classload/User.class"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] bytes = getClassBytes(file);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassBytes(File file) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    WritableByteChannel writableByteChannel = <span class="keyword">null</span>;</span><br><span class="line">    ByteArrayOutputStream outStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">try</span> (FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file)) &#123;</span><br><span class="line">      FileChannel channel = inputStream.getChannel();</span><br><span class="line">      writableByteChannel = Channels.newChannel(outStream);</span><br><span class="line">      ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">      <span class="keyword">while</span> (channel.read(buffer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buffer.flip();</span><br><span class="line">        writableByteChannel.write(buffer);</span><br><span class="line">        buffer.clear();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      closeChannel(writableByteChannel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outStream.toByteArray();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeChannel</span><span class="params">(WritableByteChannel writableByteChannel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(writableByteChannel)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      writableByteChannel.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">"com/example/jpa/classload/User"</span>, <span class="keyword">true</span>, <span class="keyword">new</span> TestClassLoad());</span><br><span class="line">Object object = clazz.newInstance();</span><br></pre></td></tr></table></figure><h2 id="3-双亲委派模型"><a href="#3-双亲委派模型" class="headerlink" title="3. 双亲委派模型"></a>3. 双亲委派模型</h2><p>其模型如下：<br><img src="/img/classload.png" alt=""><br>双亲委派模型的实现源码如下(jdk8)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">     <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">     Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">     <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">           c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           c = findBootstrapClassOrNull(name);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">         <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">         <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">         <span class="comment">// to find the class.</span></span><br><span class="line">         <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">         c = findClass(name);</span><br><span class="line">         <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">         sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">         sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">         sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">       resolveClass(c);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其加载方式如下：<br>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器无法完成该加载请求时，子加载器才会尝试自己去加载。</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JPA深入</title>
      <link href="/2018/08/19/jpa%E6%B7%B1%E5%85%A5/"/>
      <url>/2018/08/19/jpa%E6%B7%B1%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="1-JpaRepository继承关系"><a href="#1-JpaRepository继承关系" class="headerlink" title="1. JpaRepository继承关系"></a>1. JpaRepository继承关系</h2><p>JpaRepository继承了PagingAndSortingRepository和QueryByExampleExecutor，具体描述如下：<br><strong>PagingAndSortingRepository</strong> 支持分页与排序，包含方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span></span>;</span><br><span class="line"><span class="comment">//Pageable包含分页信息</span></span><br><span class="line"><span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p>使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sort sort = <span class="keyword">new</span> Sort(Direction.DESC, <span class="string">"id"</span>);</span><br><span class="line">PageRequest pageRequest = <span class="keyword">new</span> PageRequest(pageNo, pageSize, sort);</span><br><span class="line">Page page = userRepository.findAll(pageRequest);</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>QueryByExampleExecutor</strong> 实现动态条件查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">&lt;S extends T&gt; <span class="function">Optional&lt;S&gt; <span class="title">findOne</span><span class="params">(Example&lt;S&gt; example)</span></span>;</span><br><span class="line">&lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; example)</span></span>;</span><br><span class="line">&lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; example, Sort sort)</span></span>;</span><br><span class="line">&lt;S extends T&gt; <span class="function">Page&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; example, Pageable pageable)</span></span>;</span><br><span class="line">&lt;S extends T&gt; <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Example&lt;S&gt; example)</span></span>;</span><br><span class="line">&lt;S extends T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Example&lt;S&gt; example)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UserEntity entity=<span class="keyword">new</span> UserEntity();</span><br><span class="line">entity.setUserId(<span class="keyword">null</span>);</span><br><span class="line">entity.setUserName(<span class="string">"aa"</span>);</span><br><span class="line">ExampleMatcher matcher = ExampleMatcher.matching().withIgnoreNullValues();</span><br><span class="line">Example&lt;CompanyAccountEntity&gt; example = Example.of(entity, matcher);</span><br><span class="line">List&lt;UserEntity&gt; entities = userRepository.findAll(example);<span class="comment">//可结合分页使用</span></span><br></pre></td></tr></table></figure><p><strong>CrudRepository</strong> 提供了公共的通用的CRUD方法,其主要是Spring Data兼容NoSQL而进行的抽象封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S entity)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">saveAll</span><span class="params">(Iterable&lt;S&gt; entities)</span></span>;</span><br><span class="line">    <span class="function">Optional&lt;T&gt; <span class="title">findById</span><span class="params">(ID id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsById</span><span class="params">(ID id)</span></span>;</span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;ID&gt; ids)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(ID id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(T entity)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Iterable&lt;? extends T&gt; entities)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-SimpleJpaRepository"><a href="#2-SimpleJpaRepository" class="headerlink" title="2. SimpleJpaRepository"></a>2. SimpleJpaRepository</h2><p>SimpleJpaRepository是JPA整个关联数据库的所有Repository的接口实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ID_MUST_NOT_BE_NULL = <span class="string">"The given id must not be null!"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JpaEntityInformation&lt;T, ?&gt; entityInformation;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EntityManager em;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersistenceProvider provider;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> CrudMethodMetadata metadata;</span><br><span class="line">    ....</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(entity, <span class="string">"The entity must not be null!"</span>);</span><br><span class="line">    em.remove(em.contains(entity) ? entity : em.merge(entity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从其实现上看，SimpleJpaRepository通过EntityManger进行实体的操作，JpaEntityInforMation 保存着实体的相关信息以及crud 方法的元数据等等。</p><h2 id="3-查询方法生成"><a href="#3-查询方法生成" class="headerlink" title="3. 查询方法生成"></a>3. 查询方法生成</h2><p>基础架构中有个根据方法名的查询生成器机制，对于在存储库的实体上构建约束查询很有用，该机制方法的前缀 find…By、read…By、query…By、count…By 和 get…By 关联对应实体字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartTree</span> <span class="keyword">implements</span> <span class="title">Streamable</span>&lt;<span class="title">OrPart</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEYWORD_TEMPLATE = <span class="string">"(%s)(?=(\\p&#123;Lu&#125;|\\P&#123;InBASIC_LATIN&#125;))"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUERY_PATTERN = <span class="string">"find|read|get|query|stream"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COUNT_PATTERN = <span class="string">"count"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXISTS_PATTERN = <span class="string">"exists"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELETE_PATTERN = <span class="string">"delete|remove"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PREFIX_TEMPLATE = Pattern.compile( </span><br><span class="line"><span class="string">"^("</span> + QUERY_PATTERN + <span class="string">"|"</span> + COUNT_PATTERN + <span class="string">"|"</span> + EXISTS_PATTERN + <span class="string">"|"</span> + DELETE_PATTERN + <span class="string">")((\\p&#123;Lu&#125;.*?))??By"</span>);</span><br></pre></td></tr></table></figure><p>解析方法的实际结果取决于创建查询的持久性存储,表达式通常是可以连接运算符的属性遍历，如：And,Or Between、LessThan、GreaterThan、Like等还包含IgnoreCase，具体关键字可查看public static enum Type。</p><h2 id="4-Query使用"><a href="#4-Query使用" class="headerlink" title="4. @Query使用"></a>4. @Query使用</h2><p>查询示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"SELECT u FROM user u"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">List&lt;UserEntity&gt; <span class="title">findUserEntities</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"SELECT u FROM user u"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">Stream&lt;UserEntity&gt; <span class="title">findUserEntitiesStream</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>更新示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Modifying</span>(clearAutomatically = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"UPDATE user SET user_name=?1 WHERE id=?2"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUserNameById</span><span class="params">(String userName,Long id)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JPA初步</title>
      <link href="/2018/08/18/jpa%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
      <url>/2018/08/18/jpa%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>Spring data jpa是JPA规范的再次封装抽象，底层使用了Hibernate的JPA技术实现，引用JPQL（Java Persistence Query Language查询语言，属于 Spring 的整个生态体系的一部分。Spring Data JPA作为Spring生态的部分，使用起来比较方便，加快了开发的效率，使开发者不需要关系和配置更多的东西，完全可以沉浸在 Spring 的完整生态标准的实现下，上手简单、开发效率高，对象的支持比较好，有较大的灵活性，市场的认可度越来越高。</p><h2 id="2-Spring-boot集成JPA"><a href="#2-Spring-boot集成JPA" class="headerlink" title="2. Spring boot集成JPA"></a>2. Spring boot集成JPA</h2><p>gradle添加依赖：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line"><span class="keyword">runtime</span>(<span class="string">'mysql:mysql-connector-java'</span>)</span><br><span class="line">testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>application.yml文件中配置相关配置,采用hikari数据库连接池:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>DataSourceConfig如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.hikari"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> <span class="keyword">extends</span> <span class="title">HikariConfig</span> </span>&#123;</span><br><span class="line">  <span class="function">HikariDataSource <span class="title">createDataSource</span><span class="params">(String jdbcUrl, String username, String password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setJdbcUrl(jdbcUrl);</span><br><span class="line">    <span class="keyword">this</span>.setUsername(username);</span><br><span class="line">    <span class="keyword">this</span>.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HikariDataSource(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处采用DataSourceConfig作为数据源配置的基类，因此有@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)限制在多数据源时加载不同的数据源配置。如下为使用的数据源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Primary</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">(DataSourceConfig dataSourceConfig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dataSourceConfig.createDataSource(url, userName, passWord);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userName = userName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getPassWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> passWord;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><h3 id="创建实体对象："><a href="#创建实体对象：" class="headerlink" title="创建实体对象："></a>创建实体对象：</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@Basic</span></span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> Long userId;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> Timestamp ctime;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> Timestamp mtime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userId = userId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userName = userName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Timestamp <span class="title">getCtime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ctime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCtime</span><span class="params">(Timestamp ctime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctime = ctime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Timestamp <span class="title">getMtime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mtime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMtime</span><span class="params">(Timestamp mtime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mtime = mtime;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Repository："><a href="#创建Repository：" class="headerlink" title="创建Repository："></a>创建Repository：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserEntity</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/getAll"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;UserEntity&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserEntity <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserEntity entity = <span class="keyword">new</span> UserEntity();</span><br><span class="line">    entity.setUserId(<span class="number">3L</span>);</span><br><span class="line">    entity.setUserName(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">return</span> userRepository.save(entity);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-JpaRepository初步"><a href="#4-JpaRepository初步" class="headerlink" title="4. JpaRepository初步"></a>4. JpaRepository初步</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span></span>;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;ID&gt; ids)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">saveAll</span><span class="params">(Iterable&lt;S&gt; entities)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S entity)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; entities)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">getOne</span><span class="params">(ID id)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; example)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; example, Sort sort)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JpaRepository&lt;T, ID&gt;说明：<br>T： 关联的实体对象<br>ID：为关联实体的Id类型 </p><p>Sava方法实现：sava()会通过id判断插入的对象是否为新的，如果为新插入，否则更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S entity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (entityInformation.isNew(entity)) &#123;</span><br><span class="line">em.persist(entity);</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> em.merge(entity);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用save方法时，Entity属性不能为null，动态插入时需要在对应实体加@DynamicInsert或在对应字段加@Column(insertable = false)，如果我们不想让mtime插入或手动更新，可以如下使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(insertable = <span class="keyword">false</span>,updatable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> Timestamp mtime;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
